
Donkey_Kong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018120  08005a34  08005a34  00006a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801db54  0801db54  0001f038  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801db54  0801db54  0001eb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801db5c  0801db5c  0001f038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801db5c  0801db5c  0001eb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801db60  0801db60  0001eb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  0801db64  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000038  0801db9c  0001f038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  0801db9c  0001f268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013800  00000000  00000000  0001f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e49  00000000  00000000  00032868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  000356b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018acc  00000000  00000000  00036790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013b47  00000000  00000000  0004f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009bf1b  00000000  00000000  00062da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000fecbe  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000d0e  00000000  00000000  000fed01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004720  00000000  00000000  000ffa10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00104130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000038 	.word	0x20000038
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a1c 	.word	0x08005a1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000003c 	.word	0x2000003c
 80001d4:	08005a1c 	.word	0x08005a1c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a28:	f000 b988 	b.w	8000d3c <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	468e      	mov	lr, r1
 8000a4c:	4604      	mov	r4, r0
 8000a4e:	4688      	mov	r8, r1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d14a      	bne.n	8000aea <__udivmoddi4+0xa6>
 8000a54:	428a      	cmp	r2, r1
 8000a56:	4617      	mov	r7, r2
 8000a58:	d962      	bls.n	8000b20 <__udivmoddi4+0xdc>
 8000a5a:	fab2 f682 	clz	r6, r2
 8000a5e:	b14e      	cbz	r6, 8000a74 <__udivmoddi4+0x30>
 8000a60:	f1c6 0320 	rsb	r3, r6, #32
 8000a64:	fa01 f806 	lsl.w	r8, r1, r6
 8000a68:	fa20 f303 	lsr.w	r3, r0, r3
 8000a6c:	40b7      	lsls	r7, r6
 8000a6e:	ea43 0808 	orr.w	r8, r3, r8
 8000a72:	40b4      	lsls	r4, r6
 8000a74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a78:	fa1f fc87 	uxth.w	ip, r7
 8000a7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a80:	0c23      	lsrs	r3, r4, #16
 8000a82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0x62>
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000a98:	f080 80ea 	bcs.w	8000c70 <__udivmoddi4+0x22c>
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	f240 80e7 	bls.w	8000c70 <__udivmoddi4+0x22c>
 8000aa2:	3902      	subs	r1, #2
 8000aa4:	443b      	add	r3, r7
 8000aa6:	1a9a      	subs	r2, r3, r2
 8000aa8:	b2a3      	uxth	r3, r4
 8000aaa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ab2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ab6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aba:	459c      	cmp	ip, r3
 8000abc:	d909      	bls.n	8000ad2 <__udivmoddi4+0x8e>
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000ac4:	f080 80d6 	bcs.w	8000c74 <__udivmoddi4+0x230>
 8000ac8:	459c      	cmp	ip, r3
 8000aca:	f240 80d3 	bls.w	8000c74 <__udivmoddi4+0x230>
 8000ace:	443b      	add	r3, r7
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad6:	eba3 030c 	sub.w	r3, r3, ip
 8000ada:	2100      	movs	r1, #0
 8000adc:	b11d      	cbz	r5, 8000ae6 <__udivmoddi4+0xa2>
 8000ade:	40f3      	lsrs	r3, r6
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d905      	bls.n	8000afa <__udivmoddi4+0xb6>
 8000aee:	b10d      	cbz	r5, 8000af4 <__udivmoddi4+0xb0>
 8000af0:	e9c5 0100 	strd	r0, r1, [r5]
 8000af4:	2100      	movs	r1, #0
 8000af6:	4608      	mov	r0, r1
 8000af8:	e7f5      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000afa:	fab3 f183 	clz	r1, r3
 8000afe:	2900      	cmp	r1, #0
 8000b00:	d146      	bne.n	8000b90 <__udivmoddi4+0x14c>
 8000b02:	4573      	cmp	r3, lr
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0xc8>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 8105 	bhi.w	8000d16 <__udivmoddi4+0x2d2>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	4690      	mov	r8, r2
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d0e5      	beq.n	8000ae6 <__udivmoddi4+0xa2>
 8000b1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b1e:	e7e2      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f000 8090 	beq.w	8000c46 <__udivmoddi4+0x202>
 8000b26:	fab2 f682 	clz	r6, r2
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	f040 80a4 	bne.w	8000c78 <__udivmoddi4+0x234>
 8000b30:	1a8a      	subs	r2, r1, r2
 8000b32:	0c03      	lsrs	r3, r0, #16
 8000b34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b38:	b280      	uxth	r0, r0
 8000b3a:	b2bc      	uxth	r4, r7
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d907      	bls.n	8000b62 <__udivmoddi4+0x11e>
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000b58:	d202      	bcs.n	8000b60 <__udivmoddi4+0x11c>
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	f200 80e0 	bhi.w	8000d20 <__udivmoddi4+0x2dc>
 8000b60:	46c4      	mov	ip, r8
 8000b62:	1a9b      	subs	r3, r3, r2
 8000b64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b70:	fb02 f404 	mul.w	r4, r2, r4
 8000b74:	429c      	cmp	r4, r3
 8000b76:	d907      	bls.n	8000b88 <__udivmoddi4+0x144>
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000b7e:	d202      	bcs.n	8000b86 <__udivmoddi4+0x142>
 8000b80:	429c      	cmp	r4, r3
 8000b82:	f200 80ca 	bhi.w	8000d1a <__udivmoddi4+0x2d6>
 8000b86:	4602      	mov	r2, r0
 8000b88:	1b1b      	subs	r3, r3, r4
 8000b8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0x98>
 8000b90:	f1c1 0620 	rsb	r6, r1, #32
 8000b94:	408b      	lsls	r3, r1
 8000b96:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9a:	431f      	orrs	r7, r3
 8000b9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ba0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ba4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ba8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bac:	4323      	orrs	r3, r4
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	fa1f fc87 	uxth.w	ip, r7
 8000bb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bba:	0c1c      	lsrs	r4, r3, #16
 8000bbc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bc0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bc4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bc8:	45a6      	cmp	lr, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	d909      	bls.n	8000be4 <__udivmoddi4+0x1a0>
 8000bd0:	193c      	adds	r4, r7, r4
 8000bd2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000bd6:	f080 809c 	bcs.w	8000d12 <__udivmoddi4+0x2ce>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f240 8099 	bls.w	8000d12 <__udivmoddi4+0x2ce>
 8000be0:	3802      	subs	r0, #2
 8000be2:	443c      	add	r4, r7
 8000be4:	eba4 040e 	sub.w	r4, r4, lr
 8000be8:	fa1f fe83 	uxth.w	lr, r3
 8000bec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bf8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x1ce>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c06:	f080 8082 	bcs.w	8000d0e <__udivmoddi4+0x2ca>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	d97f      	bls.n	8000d0e <__udivmoddi4+0x2ca>
 8000c0e:	3b02      	subs	r3, #2
 8000c10:	443c      	add	r4, r7
 8000c12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c16:	eba4 040c 	sub.w	r4, r4, ip
 8000c1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c1e:	4564      	cmp	r4, ip
 8000c20:	4673      	mov	r3, lr
 8000c22:	46e1      	mov	r9, ip
 8000c24:	d362      	bcc.n	8000cec <__udivmoddi4+0x2a8>
 8000c26:	d05f      	beq.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c28:	b15d      	cbz	r5, 8000c42 <__udivmoddi4+0x1fe>
 8000c2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c32:	fa04 f606 	lsl.w	r6, r4, r6
 8000c36:	fa22 f301 	lsr.w	r3, r2, r1
 8000c3a:	431e      	orrs	r6, r3
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c42:	2100      	movs	r1, #0
 8000c44:	e74f      	b.n	8000ae6 <__udivmoddi4+0xa2>
 8000c46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c4a:	0c01      	lsrs	r1, r0, #16
 8000c4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c50:	b280      	uxth	r0, r0
 8000c52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c56:	463b      	mov	r3, r7
 8000c58:	4638      	mov	r0, r7
 8000c5a:	463c      	mov	r4, r7
 8000c5c:	46b8      	mov	r8, r7
 8000c5e:	46be      	mov	lr, r7
 8000c60:	2620      	movs	r6, #32
 8000c62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c66:	eba2 0208 	sub.w	r2, r2, r8
 8000c6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c6e:	e766      	b.n	8000b3e <__udivmoddi4+0xfa>
 8000c70:	4601      	mov	r1, r0
 8000c72:	e718      	b.n	8000aa6 <__udivmoddi4+0x62>
 8000c74:	4610      	mov	r0, r2
 8000c76:	e72c      	b.n	8000ad2 <__udivmoddi4+0x8e>
 8000c78:	f1c6 0220 	rsb	r2, r6, #32
 8000c7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c80:	40b7      	lsls	r7, r6
 8000c82:	40b1      	lsls	r1, r6
 8000c84:	fa20 f202 	lsr.w	r2, r0, r2
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c98:	0c11      	lsrs	r1, r2, #16
 8000c9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9e:	fb08 f904 	mul.w	r9, r8, r4
 8000ca2:	40b0      	lsls	r0, r6
 8000ca4:	4589      	cmp	r9, r1
 8000ca6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000caa:	b280      	uxth	r0, r0
 8000cac:	d93e      	bls.n	8000d2c <__udivmoddi4+0x2e8>
 8000cae:	1879      	adds	r1, r7, r1
 8000cb0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000cb4:	d201      	bcs.n	8000cba <__udivmoddi4+0x276>
 8000cb6:	4589      	cmp	r9, r1
 8000cb8:	d81f      	bhi.n	8000cfa <__udivmoddi4+0x2b6>
 8000cba:	eba1 0109 	sub.w	r1, r1, r9
 8000cbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc2:	fb09 f804 	mul.w	r8, r9, r4
 8000cc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cca:	b292      	uxth	r2, r2
 8000ccc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cd0:	4542      	cmp	r2, r8
 8000cd2:	d229      	bcs.n	8000d28 <__udivmoddi4+0x2e4>
 8000cd4:	18ba      	adds	r2, r7, r2
 8000cd6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000cda:	d2c4      	bcs.n	8000c66 <__udivmoddi4+0x222>
 8000cdc:	4542      	cmp	r2, r8
 8000cde:	d2c2      	bcs.n	8000c66 <__udivmoddi4+0x222>
 8000ce0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ce4:	443a      	add	r2, r7
 8000ce6:	e7be      	b.n	8000c66 <__udivmoddi4+0x222>
 8000ce8:	45f0      	cmp	r8, lr
 8000cea:	d29d      	bcs.n	8000c28 <__udivmoddi4+0x1e4>
 8000cec:	ebbe 0302 	subs.w	r3, lr, r2
 8000cf0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	46e1      	mov	r9, ip
 8000cf8:	e796      	b.n	8000c28 <__udivmoddi4+0x1e4>
 8000cfa:	eba7 0909 	sub.w	r9, r7, r9
 8000cfe:	4449      	add	r1, r9
 8000d00:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d04:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d08:	fb09 f804 	mul.w	r8, r9, r4
 8000d0c:	e7db      	b.n	8000cc6 <__udivmoddi4+0x282>
 8000d0e:	4673      	mov	r3, lr
 8000d10:	e77f      	b.n	8000c12 <__udivmoddi4+0x1ce>
 8000d12:	4650      	mov	r0, sl
 8000d14:	e766      	b.n	8000be4 <__udivmoddi4+0x1a0>
 8000d16:	4608      	mov	r0, r1
 8000d18:	e6fd      	b.n	8000b16 <__udivmoddi4+0xd2>
 8000d1a:	443b      	add	r3, r7
 8000d1c:	3a02      	subs	r2, #2
 8000d1e:	e733      	b.n	8000b88 <__udivmoddi4+0x144>
 8000d20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d24:	443b      	add	r3, r7
 8000d26:	e71c      	b.n	8000b62 <__udivmoddi4+0x11e>
 8000d28:	4649      	mov	r1, r9
 8000d2a:	e79c      	b.n	8000c66 <__udivmoddi4+0x222>
 8000d2c:	eba1 0109 	sub.w	r1, r1, r9
 8000d30:	46c4      	mov	ip, r8
 8000d32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d36:	fb09 f804 	mul.w	r8, r9, r4
 8000d3a:	e7c4      	b.n	8000cc6 <__udivmoddi4+0x282>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4a:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <ST7735_Select+0x14>)
 8000d4c:	f002 ff8a 	bl	8003c64 <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020400 	.word	0x40020400

08000d58 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d62:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <ST7735_Unselect+0x14>)
 8000d64:	f002 ff7e 	bl	8003c64 <HAL_GPIO_WritePin>
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020400 	.word	0x40020400

08000d70 <ST7735_Reset>:

static void ST7735_Reset() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2180      	movs	r1, #128	@ 0x80
 8000d78:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <ST7735_Reset+0x24>)
 8000d7a:	f002 ff73 	bl	8003c64 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000d7e:	2005      	movs	r0, #5
 8000d80:	f002 f8f0 	bl	8002f64 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	@ 0x80
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <ST7735_Reset+0x24>)
 8000d8a:	f002 ff6b 	bl	8003c64 <HAL_GPIO_WritePin>
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40020400 	.word	0x40020400

08000d98 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da8:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <ST7735_WriteCommand+0x2c>)
 8000daa:	f002 ff5b 	bl	8003c64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000dae:	1df9      	adds	r1, r7, #7
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db4:	2201      	movs	r2, #1
 8000db6:	4804      	ldr	r0, [pc, #16]	@ (8000dc8 <ST7735_WriteCommand+0x30>)
 8000db8:	f003 fcb3 	bl	8004722 <HAL_SPI_Transmit>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	20000170 	.word	0x20000170

08000dcc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ddc:	4807      	ldr	r0, [pc, #28]	@ (8000dfc <ST7735_WriteData+0x30>)
 8000dde:	f002 ff41 	bl	8003c64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4804      	ldr	r0, [pc, #16]	@ (8000e00 <ST7735_WriteData+0x34>)
 8000dee:	f003 fc98 	bl	8004722 <HAL_SPI_Transmit>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	20000170 	.word	0x20000170

08000e04 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000e16:	e034      	b.n	8000e82 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000e22:	7afb      	ldrb	r3, [r7, #11]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ffb7 	bl	8000d98 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000e34:	7abb      	ldrb	r3, [r7, #10]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e3c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000e3e:	7abb      	ldrb	r3, [r7, #10]
 8000e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e44:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000e46:	7abb      	ldrb	r3, [r7, #10]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d008      	beq.n	8000e5e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000e4c:	7abb      	ldrb	r3, [r7, #10]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ffbb 	bl	8000dcc <ST7735_WriteData>
            addr += numArgs;
 8000e56:	7abb      	ldrb	r3, [r7, #10]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00e      	beq.n	8000e82 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	2bff      	cmp	r3, #255	@ 0xff
 8000e72:	d102      	bne.n	8000e7a <ST7735_ExecuteCommandList+0x76>
 8000e74:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e78:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000e7a:	89bb      	ldrh	r3, [r7, #12]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 f871 	bl	8002f64 <HAL_Delay>
    while(numCommands--) {
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	1e5a      	subs	r2, r3, #1
 8000e86:	73fa      	strb	r2, [r7, #15]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1c5      	bne.n	8000e18 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000e96:	b590      	push	{r4, r7, lr}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4623      	mov	r3, r4
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71bb      	strb	r3, [r7, #6]
 8000eac:	460b      	mov	r3, r1
 8000eae:	717b      	strb	r3, [r7, #5]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000eb4:	202a      	movs	r0, #42	@ 0x2a
 8000eb6:	f7ff ff6f 	bl	8000d98 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000eba:	2300      	movs	r3, #0
 8000ebc:	733b      	strb	r3, [r7, #12]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	737b      	strb	r3, [r7, #13]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73bb      	strb	r3, [r7, #14]
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	3302      	adds	r3, #2
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff77 	bl	8000dcc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000ede:	202b      	movs	r0, #43	@ 0x2b
 8000ee0:	f7ff ff5a 	bl	8000d98 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000eec:	793b      	ldrb	r3, [r7, #4]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	2104      	movs	r1, #4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff66 	bl	8000dcc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000f00:	202c      	movs	r0, #44	@ 0x2c
 8000f02:	f7ff ff49 	bl	8000d98 <ST7735_WriteCommand>
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
	...

08000f10 <ST7735_Init>:

void ST7735_Init() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000f14:	f7ff ff14 	bl	8000d40 <ST7735_Select>
    ST7735_Reset();
 8000f18:	f7ff ff2a 	bl	8000d70 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000f1c:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <ST7735_Init+0x28>)
 8000f1e:	f7ff ff71 	bl	8000e04 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000f22:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <ST7735_Init+0x2c>)
 8000f24:	f7ff ff6e 	bl	8000e04 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <ST7735_Init+0x30>)
 8000f2a:	f7ff ff6b 	bl	8000e04 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000f2e:	f7ff ff13 	bl	8000d58 <ST7735_Unselect>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	080067a4 	.word	0x080067a4
 8000f3c:	080067e0 	.word	0x080067e0
 8000f40:	080067f0 	.word	0x080067f0

08000f44 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000f44:	b082      	sub	sp, #8
 8000f46:	b590      	push	{r4, r7, lr}
 8000f48:	b089      	sub	sp, #36	@ 0x24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
 8000f52:	460b      	mov	r3, r1
 8000f54:	80bb      	strh	r3, [r7, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	b2d8      	uxtb	r0, r3
 8000f5e:	88bb      	ldrh	r3, [r7, #4]
 8000f60:	b2d9      	uxtb	r1, r3
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000f6a:	4413      	add	r3, r2
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b2dc      	uxtb	r4, r3
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4622      	mov	r2, r4
 8000f84:	f7ff ff87 	bl	8000e96 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	e043      	b.n	8001016 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000f8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f90:	78fb      	ldrb	r3, [r7, #3]
 8000f92:	3b20      	subs	r3, #32
 8000f94:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000f98:	fb01 f303 	mul.w	r3, r1, r3
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	e029      	b.n	8001004 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00e      	beq.n	8000fde <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000fc0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000fc2:	0a1b      	lsrs	r3, r3, #8
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	743b      	strb	r3, [r7, #16]
 8000fca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fef8 	bl	8000dcc <ST7735_WriteData>
 8000fdc:	e00f      	b.n	8000ffe <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000fde:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	733b      	strb	r3, [r7, #12]
 8000fea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fee7 	bl	8000dcc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	3301      	adds	r3, #1
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001008:	461a      	mov	r2, r3
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4293      	cmp	r3, r2
 800100e:	d3cf      	bcc.n	8000fb0 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	3301      	adds	r3, #1
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800101a:	461a      	mov	r2, r3
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	4293      	cmp	r3, r2
 8001020:	d3b5      	bcc.n	8000f8e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001022:	bf00      	nop
 8001024:	bf00      	nop
 8001026:	3724      	adds	r7, #36	@ 0x24
 8001028:	46bd      	mov	sp, r7
 800102a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800102e:	b002      	add	sp, #8
 8001030:	4770      	bx	lr

08001032 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001032:	b082      	sub	sp, #8
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
 800103a:	603a      	str	r2, [r7, #0]
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
 8001042:	460b      	mov	r3, r1
 8001044:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001046:	f7ff fe7b 	bl	8000d40 <ST7735_Select>

    while(*str) {
 800104a:	e02d      	b.n	80010a8 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	7d3a      	ldrb	r2, [r7, #20]
 8001050:	4413      	add	r3, r2
 8001052:	2b7f      	cmp	r3, #127	@ 0x7f
 8001054:	dd13      	ble.n	800107e <ST7735_WriteString+0x4c>
            x = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800105a:	7d7b      	ldrb	r3, [r7, #21]
 800105c:	461a      	mov	r2, r3
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	7d7a      	ldrb	r2, [r7, #21]
 8001068:	4413      	add	r3, r2
 800106a:	2b9f      	cmp	r3, #159	@ 0x9f
 800106c:	dc21      	bgt.n	80010b2 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b20      	cmp	r3, #32
 8001074:	d103      	bne.n	800107e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	603b      	str	r3, [r7, #0]
                continue;
 800107c:	e014      	b.n	80010a8 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	88b9      	ldrh	r1, [r7, #4]
 8001084:	88f8      	ldrh	r0, [r7, #6]
 8001086:	8c3b      	ldrh	r3, [r7, #32]
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	8bbb      	ldrh	r3, [r7, #28]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f7ff ff56 	bl	8000f44 <ST7735_WriteChar>
        x += font.width;
 8001098:	7d3b      	ldrb	r3, [r7, #20]
 800109a:	461a      	mov	r2, r3
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	4413      	add	r3, r2
 80010a0:	80fb      	strh	r3, [r7, #6]
        str++;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1cd      	bne.n	800104c <ST7735_WriteString+0x1a>
 80010b0:	e000      	b.n	80010b4 <ST7735_WriteString+0x82>
                break;
 80010b2:	bf00      	nop
    }

    ST7735_Unselect();
 80010b4:	f7ff fe50 	bl	8000d58 <ST7735_Unselect>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010c2:	b002      	add	sp, #8
 80010c4:	4770      	bx	lr
	...

080010c8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4604      	mov	r4, r0
 80010d0:	4608      	mov	r0, r1
 80010d2:	4611      	mov	r1, r2
 80010d4:	461a      	mov	r2, r3
 80010d6:	4623      	mov	r3, r4
 80010d8:	80fb      	strh	r3, [r7, #6]
 80010da:	4603      	mov	r3, r0
 80010dc:	80bb      	strh	r3, [r7, #4]
 80010de:	460b      	mov	r3, r1
 80010e0:	807b      	strh	r3, [r7, #2]
 80010e2:	4613      	mov	r3, r2
 80010e4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ea:	d858      	bhi.n	800119e <ST7735_FillRectangle+0xd6>
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	2b9f      	cmp	r3, #159	@ 0x9f
 80010f0:	d855      	bhi.n	800119e <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80010f2:	88fa      	ldrh	r2, [r7, #6]
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	4413      	add	r3, r2
 80010f8:	2b80      	cmp	r3, #128	@ 0x80
 80010fa:	dd03      	ble.n	8001104 <ST7735_FillRectangle+0x3c>
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001102:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001104:	88ba      	ldrh	r2, [r7, #4]
 8001106:	883b      	ldrh	r3, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	2ba0      	cmp	r3, #160	@ 0xa0
 800110c:	dd03      	ble.n	8001116 <ST7735_FillRectangle+0x4e>
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8001114:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001116:	f7ff fe13 	bl	8000d40 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800111a:	88fb      	ldrh	r3, [r7, #6]
 800111c:	b2d8      	uxtb	r0, r3
 800111e:	88bb      	ldrh	r3, [r7, #4]
 8001120:	b2d9      	uxtb	r1, r3
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4413      	add	r3, r2
 800112c:	b2db      	uxtb	r3, r3
 800112e:	3b01      	subs	r3, #1
 8001130:	b2dc      	uxtb	r4, r3
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	883b      	ldrh	r3, [r7, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4413      	add	r3, r2
 800113c:	b2db      	uxtb	r3, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4622      	mov	r2, r4
 8001144:	f7ff fea7 	bl	8000e96 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001148:	8c3b      	ldrh	r3, [r7, #32]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b29b      	uxth	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	733b      	strb	r3, [r7, #12]
 8001152:	8c3b      	ldrh	r3, [r7, #32]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800115e:	4812      	ldr	r0, [pc, #72]	@ (80011a8 <ST7735_FillRectangle+0xe0>)
 8001160:	f002 fd80 	bl	8003c64 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001164:	883b      	ldrh	r3, [r7, #0]
 8001166:	80bb      	strh	r3, [r7, #4]
 8001168:	e013      	b.n	8001192 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	e00a      	b.n	8001186 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001170:	f107 010c 	add.w	r1, r7, #12
 8001174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001178:	2202      	movs	r2, #2
 800117a:	480c      	ldr	r0, [pc, #48]	@ (80011ac <ST7735_FillRectangle+0xe4>)
 800117c:	f003 fad1 	bl	8004722 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	3b01      	subs	r3, #1
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f1      	bne.n	8001170 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	80bb      	strh	r3, [r7, #4]
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e8      	bne.n	800116a <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8001198:	f7ff fdde 	bl	8000d58 <ST7735_Unselect>
 800119c:	e000      	b.n	80011a0 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800119e:	bf00      	nop
}
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd90      	pop	{r4, r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020400 	.word	0x40020400
 80011ac:	20000170 	.word	0x20000170

080011b0 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	23a0      	movs	r3, #160	@ 0xa0
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff7f 	bl	80010c8 <ST7735_FillRectangle>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <ST7735_DrawImage>:

void ST7735_FillScreenFast(uint16_t color) {
    ST7735_FillRectangleFast(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80011d2:	b590      	push	{r4, r7, lr}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4604      	mov	r4, r0
 80011da:	4608      	mov	r0, r1
 80011dc:	4611      	mov	r1, r2
 80011de:	461a      	mov	r2, r3
 80011e0:	4623      	mov	r3, r4
 80011e2:	80fb      	strh	r3, [r7, #6]
 80011e4:	4603      	mov	r3, r0
 80011e6:	80bb      	strh	r3, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	807b      	strh	r3, [r7, #2]
 80011ec:	4613      	mov	r3, r2
 80011ee:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80011f4:	d831      	bhi.n	800125a <ST7735_DrawImage+0x88>
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	2b9f      	cmp	r3, #159	@ 0x9f
 80011fa:	d82e      	bhi.n	800125a <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 80011fc:	88fa      	ldrh	r2, [r7, #6]
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	4413      	add	r3, r2
 8001202:	2b80      	cmp	r3, #128	@ 0x80
 8001204:	dc2b      	bgt.n	800125e <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8001206:	88ba      	ldrh	r2, [r7, #4]
 8001208:	883b      	ldrh	r3, [r7, #0]
 800120a:	4413      	add	r3, r2
 800120c:	2ba0      	cmp	r3, #160	@ 0xa0
 800120e:	dc28      	bgt.n	8001262 <ST7735_DrawImage+0x90>

    ST7735_Select();
 8001210:	f7ff fd96 	bl	8000d40 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	b2d8      	uxtb	r0, r3
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	b2d9      	uxtb	r1, r3
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	887b      	ldrh	r3, [r7, #2]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4413      	add	r3, r2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	3b01      	subs	r3, #1
 800122a:	b2dc      	uxtb	r4, r3
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	883b      	ldrh	r3, [r7, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b2db      	uxtb	r3, r3
 8001238:	3b01      	subs	r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	4622      	mov	r2, r4
 800123e:	f7ff fe2a 	bl	8000e96 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	883a      	ldrh	r2, [r7, #0]
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4619      	mov	r1, r3
 800124e:	69b8      	ldr	r0, [r7, #24]
 8001250:	f7ff fdbc 	bl	8000dcc <ST7735_WriteData>
    ST7735_Unselect();
 8001254:	f7ff fd80 	bl	8000d58 <ST7735_Unselect>
 8001258:	e004      	b.n	8001264 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800125a:	bf00      	nop
 800125c:	e002      	b.n	8001264 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 800125e:	bf00      	nop
 8001260:	e000      	b.n	8001264 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8001262:	bf00      	nop
}
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bd90      	pop	{r4, r7, pc}
	...

0800126c <DAC_OUT>:
uint32_t current_length = 0;
uint32_t index_audio = 0;



void DAC_OUT(uint32_t value){
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC,AUDIO_B0_OUT_Pin,value&0x01 );
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	461a      	mov	r2, r3
 8001280:	2140      	movs	r1, #64	@ 0x40
 8001282:	4815      	ldr	r0, [pc, #84]	@ (80012d8 <DAC_OUT+0x6c>)
 8001284:	f002 fcee 	bl	8003c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,AUDIO_B1_OUT_Pin,(value&0x02) >> 1 );
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	085b      	lsrs	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	2120      	movs	r1, #32
 8001298:	480f      	ldr	r0, [pc, #60]	@ (80012d8 <DAC_OUT+0x6c>)
 800129a:	f002 fce3 	bl	8003c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,AUDIO_B2_OUT_Pin,(value&0x04) >> 2 );
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012b0:	480a      	ldr	r0, [pc, #40]	@ (80012dc <DAC_OUT+0x70>)
 80012b2:	f002 fcd7 	bl	8003c64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,AUDIO_B3_OUT_Pin,(value&0x08) >> 3 );
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <DAC_OUT+0x70>)
 80012ca:	f002 fccb 	bl	8003c64 <HAL_GPIO_WritePin>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020400 	.word	0x40020400

080012e0 <play_audio>:

void play_audio(const uint8_t *audio, uint32_t length){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	if(!index_audio){//start the timer
 80012ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <play_audio+0x78>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <play_audio+0x26>
		HAL_TIM_Base_Start_IT(&htim1);
 80012f2:	481a      	ldr	r0, [pc, #104]	@ (800135c <play_audio+0x7c>)
 80012f4:	f003 fc86 	bl	8004c04 <HAL_TIM_Base_Start_IT>
		current_audio = audio;
 80012f8:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <play_audio+0x80>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
		current_length = length;
 80012fe:	4a19      	ldr	r2, [pc, #100]	@ (8001364 <play_audio+0x84>)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e011      	b.n	800132a <play_audio+0x4a>

	}else if(length == index_audio){ //end of audio
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <play_audio+0x78>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d10c      	bne.n	800132a <play_audio+0x4a>
		HAL_TIM_Base_Stop_IT(&htim1);
 8001310:	4812      	ldr	r0, [pc, #72]	@ (800135c <play_audio+0x7c>)
 8001312:	f003 fcd9 	bl	8004cc8 <HAL_TIM_Base_Stop_IT>
		index_audio = 0;
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <play_audio+0x78>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
		current_audio = 0;
 800131c:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <play_audio+0x80>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
		current_length = 0;
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <play_audio+0x84>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
		return;
 8001328:	e012      	b.n	8001350 <play_audio+0x70>
	}
		index_audio++;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <play_audio+0x78>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <play_audio+0x78>)
 8001332:	6013      	str	r3, [r2, #0]
		uint32_t val = audio[index_audio] == 7 ? 1 : 14;
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <play_audio+0x78>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b07      	cmp	r3, #7
 8001340:	d101      	bne.n	8001346 <play_audio+0x66>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <play_audio+0x68>
 8001346:	230e      	movs	r3, #14
 8001348:	60fb      	str	r3, [r7, #12]
		DAC_OUT(val);
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff ff8e 	bl	800126c <DAC_OUT>

}
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000a4 	.word	0x200000a4
 800135c:	20000054 	.word	0x20000054
 8001360:	2000009c 	.word	0x2000009c
 8001364:	200000a0 	.word	0x200000a0

08001368 <climb_pressed>:
uint8_t shield_time = 4; // (seconds)
uint8_t timeout_time = 4; // (seconds)
uint8_t shield_count = 0;
uint8_t timeout_count = 0;

uint8_t climb_pressed() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, BUTTON0_IN_Pin)) { // pin is high, was just pressed
 800136c:	2104      	movs	r1, #4
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <climb_pressed+0x1c>)
 8001370:	f002 fc60 	bl	8003c34 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <climb_pressed+0x16>
		return 1;
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <climb_pressed+0x18>
	}
	return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40020800 	.word	0x40020800

08001388 <shield_pressed>:
uint8_t shield_pressed() {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, BUTTON1_IN_Pin) && !is_shield && !is_timeout) {
 800138c:	2108      	movs	r1, #8
 800138e:	480f      	ldr	r0, [pc, #60]	@ (80013cc <shield_pressed+0x44>)
 8001390:	f002 fc50 	bl	8003c34 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d015      	beq.n	80013c6 <shield_pressed+0x3e>
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <shield_pressed+0x48>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	f083 0301 	eor.w	r3, r3, #1
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00e      	beq.n	80013c6 <shield_pressed+0x3e>
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <shield_pressed+0x4c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <shield_pressed+0x3e>
		is_shield = 1;
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <shield_pressed+0x48>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim5);
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <shield_pressed+0x50>)
 80013be:	f003 fc21 	bl	8004c04 <HAL_TIM_Base_Start_IT>
		return 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <shield_pressed+0x40>
	}
	return 0;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020800 	.word	0x40020800
 80013d0:	200000f1 	.word	0x200000f1
 80013d4:	200000f2 	.word	0x200000f2
 80013d8:	200000a8 	.word	0x200000a8

080013dc <shield_counter>:

void shield_counter() {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	if (shield_count == shield_time) {
 80013e0:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <shield_counter+0x40>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <shield_counter+0x44>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d10b      	bne.n	8001404 <shield_counter+0x28>
		is_shield = 0;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <shield_counter+0x48>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
		is_timeout = 1;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <shield_counter+0x4c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
		shield_count = 0;
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <shield_counter+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
		timeout_counter();
 80013fe:	f000 f817 	bl	8001430 <timeout_counter>
		shield_count++;

		HAL_TIM_Base_Start_IT(&htim5);
	}

}
 8001402:	e008      	b.n	8001416 <shield_counter+0x3a>
		shield_count++;
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <shield_counter+0x40>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <shield_counter+0x40>)
 800140e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim5);
 8001410:	4806      	ldr	r0, [pc, #24]	@ (800142c <shield_counter+0x50>)
 8001412:	f003 fbf7 	bl	8004c04 <HAL_TIM_Base_Start_IT>
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000f3 	.word	0x200000f3
 8001420:	20000008 	.word	0x20000008
 8001424:	200000f1 	.word	0x200000f1
 8001428:	200000f2 	.word	0x200000f2
 800142c:	200000a8 	.word	0x200000a8

08001430 <timeout_counter>:

void timeout_counter() {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	if (timeout_count == timeout_time) {
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <timeout_counter+0x34>)
 8001436:	781a      	ldrb	r2, [r3, #0]
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <timeout_counter+0x38>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d106      	bne.n	800144e <timeout_counter+0x1e>
		is_timeout = 0;
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <timeout_counter+0x3c>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
		timeout_count = 0;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <timeout_counter+0x34>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	} else {
		timeout_count++;

		HAL_TIM_Base_Start_IT(&htim5);
	}
}
 800144c:	e008      	b.n	8001460 <timeout_counter+0x30>
		timeout_count++;
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <timeout_counter+0x34>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <timeout_counter+0x34>)
 8001458:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim5);
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <timeout_counter+0x40>)
 800145c:	f003 fbd2 	bl	8004c04 <HAL_TIM_Base_Start_IT>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200000f4 	.word	0x200000f4
 8001468:	20000009 	.word	0x20000009
 800146c:	200000f2 	.word	0x200000f2
 8001470:	200000a8 	.word	0x200000a8

08001474 <set_climb>:


void set_climb(uint8_t value) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	is_climb = value;
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <set_climb+0x28>)
 800148c:	701a      	strb	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200000f0 	.word	0x200000f0

080014a0 <get_climb>:

uint8_t get_climb() {
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
	return is_climb;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <get_climb+0x14>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200000f0 	.word	0x200000f0

080014b8 <get_shield>:

uint8_t get_shield() {
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	return is_shield;
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <get_shield+0x14>)
 80014be:	781b      	ldrb	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200000f1 	.word	0x200000f1

080014d0 <player_Init>:





void player_Init(player_t *player){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	player->lvl = 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
	player->x = 0;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	705a      	strb	r2, [r3, #1]
	player->y = ground_pos[0];
 80014e4:	229f      	movs	r2, #159	@ 0x9f
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	709a      	strb	r2, [r3, #2]
	player->direction = 1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	70da      	strb	r2, [r3, #3]
	player->motion = 0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	711a      	strb	r2, [r3, #4]
	player->climb = 0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	715a      	strb	r2, [r3, #5]
	player->hit = 0;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	719a      	strb	r2, [r3, #6]
	player->shield = 0;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	71da      	strb	r2, [r3, #7]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <DK_Init>:

void DK_Init(DK_t *DK){
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	DK->x = 0;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
	DK->y = 0;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	705a      	strb	r2, [r3, #1]
	DK->state = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	709a      	strb	r2, [r3, #2]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <bullet_Init>:

void bullet_Init(bullet_t *bullet){
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 5; i++){
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e014      	b.n	8001572 <bullet_Init+0x38>
		bullet[i].x = 0;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
		bullet[i].y = 0;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	2200      	movs	r2, #0
 800155e:	705a      	strb	r2, [r3, #1]
		bullet[i].state = unselected;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	2200      	movs	r2, #0
 800156a:	70da      	strb	r2, [r3, #3]
	for(int i = 0; i < 5; i++){
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3301      	adds	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b04      	cmp	r3, #4
 8001576:	dde7      	ble.n	8001548 <bullet_Init+0xe>
	}
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <create_map>:



void create_map() {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af02      	add	r7, sp, #8

	ST7735_FillScreen(ST7735_BLACK);
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fe0e 	bl	80011b0 <ST7735_FillScreen>
	for (int i = 0; i < 7; i++) {
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	e02f      	b.n	80015fa <create_map+0x72>
		if (i == 0) {
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10c      	bne.n	80015ba <create_map+0x32>
			ST7735_DrawImage(0, ground_pos[i], 128, 1,
 80015a0:	4a1a      	ldr	r2, [pc, #104]	@ (800160c <create_map+0x84>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4b19      	ldr	r3, [pc, #100]	@ (8001610 <create_map+0x88>)
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	2301      	movs	r3, #1
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fe0d 	bl	80011d2 <ST7735_DrawImage>
 80015b8:	e00b      	b.n	80015d2 <create_map+0x4a>
					(const uint16_t*) ground);
		} else {
			ST7735_DrawImage(0, ground_pos[i], 128, 5,
 80015ba:	4a14      	ldr	r2, [pc, #80]	@ (800160c <create_map+0x84>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <create_map+0x88>)
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2305      	movs	r3, #5
 80015ca:	2280      	movs	r2, #128	@ 0x80
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fe00 	bl	80011d2 <ST7735_DrawImage>
					(const uint16_t*) ground);
		}
		ST7735_DrawImage(ladder_pos[i], ground_pos[i]-19, 10, 19,
 80015d2:	4a10      	ldr	r2, [pc, #64]	@ (8001614 <create_map+0x8c>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	4a0b      	ldr	r2, [pc, #44]	@ (800160c <create_map+0x84>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3b13      	subs	r3, #19
 80015e6:	b299      	uxth	r1, r3
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <create_map+0x90>)
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2313      	movs	r3, #19
 80015ee:	220a      	movs	r2, #10
 80015f0:	f7ff fdef 	bl	80011d2 <ST7735_DrawImage>
	for (int i = 0; i < 7; i++) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b06      	cmp	r3, #6
 80015fe:	ddcc      	ble.n	800159a <create_map+0x12>
				(const uint16_t*) ladder);
	}
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	0801db10 	.word	0x0801db10
 8001610:	0801d494 	.word	0x0801d494
 8001614:	0801db18 	.word	0x0801db18
 8001618:	0801d994 	.word	0x0801d994

0800161c <is_touching>:


uint8_t is_touching(uint8_t sprite_pos, uint8_t sprite_len, uint8_t item_pos, uint8_t item_len){ //moving object should be sprite
 800161c:	b490      	push	{r4, r7}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	4603      	mov	r3, r0
 8001630:	71bb      	strb	r3, [r7, #6]
 8001632:	460b      	mov	r3, r1
 8001634:	717b      	strb	r3, [r7, #5]
 8001636:	4613      	mov	r3, r2
 8001638:	713b      	strb	r3, [r7, #4]

	if(item_pos <= sprite_pos && sprite_pos <= item_pos+item_len) return 1;
 800163a:	797a      	ldrb	r2, [r7, #5]
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	429a      	cmp	r2, r3
 8001640:	d807      	bhi.n	8001652 <is_touching+0x36>
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	7979      	ldrb	r1, [r7, #5]
 8001646:	793b      	ldrb	r3, [r7, #4]
 8001648:	440b      	add	r3, r1
 800164a:	429a      	cmp	r2, r3
 800164c:	dc01      	bgt.n	8001652 <is_touching+0x36>
 800164e:	2301      	movs	r3, #1
 8001650:	e010      	b.n	8001674 <is_touching+0x58>
	else if(item_pos <= sprite_pos+sprite_len && sprite_pos+sprite_len <= item_pos+item_len) return 1;
 8001652:	797a      	ldrb	r2, [r7, #5]
 8001654:	79f9      	ldrb	r1, [r7, #7]
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	440b      	add	r3, r1
 800165a:	429a      	cmp	r2, r3
 800165c:	dc09      	bgt.n	8001672 <is_touching+0x56>
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	441a      	add	r2, r3
 8001664:	7979      	ldrb	r1, [r7, #5]
 8001666:	793b      	ldrb	r3, [r7, #4]
 8001668:	440b      	add	r3, r1
 800166a:	429a      	cmp	r2, r3
 800166c:	dc01      	bgt.n	8001672 <is_touching+0x56>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <is_touching+0x58>

	return 0;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bc90      	pop	{r4, r7}
 800167c:	4770      	bx	lr
	...

08001680 <can_climb>:


uint8_t can_climb(player_t *player, input_t *input){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]

	if(is_touching(input->position, 14, ladder_pos[player->lvl], 12)) return 1;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	7818      	ldrb	r0, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <can_climb+0x34>)
 8001696:	5c9a      	ldrb	r2, [r3, r2]
 8001698:	230c      	movs	r3, #12
 800169a:	210e      	movs	r1, #14
 800169c:	f7ff ffbe 	bl	800161c <is_touching>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <can_climb+0x2a>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <can_climb+0x2c>

	return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	0801db18 	.word	0x0801db18

080016b8 <update_input>:



void update_input(player_t *player, input_t *input){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
	input->position = get_pos();
 80016c2:	f001 f8b9 	bl	8002838 <get_pos>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	701a      	strb	r2, [r3, #0]

	if( in_motion() ) input->slider = get_dir();
 80016ce:	f001 f955 	bl	800297c <in_motion>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <update_input+0x2e>
 80016d8:	f001 f974 	bl	80029c4 <get_dir>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	705a      	strb	r2, [r3, #1]
 80016e4:	e006      	b.n	80016f4 <update_input+0x3c>
	else input->slider = get_dir()+2;
 80016e6:	f001 f96d 	bl	80029c4 <get_dir>
 80016ea:	4603      	mov	r3, r0
 80016ec:	3302      	adds	r3, #2
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	705a      	strb	r2, [r3, #1]


	if( (input->button_climb = climb_pressed()) && !get_climb() && can_climb(player, input) ) set_climb(1);
 80016f4:	f7ff fe38 	bl	8001368 <climb_pressed>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	709a      	strb	r2, [r3, #2]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <update_input+0x6e>
 8001708:	f7ff feca 	bl	80014a0 <get_climb>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <update_input+0x6e>
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffb3 	bl	8001680 <can_climb>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <update_input+0x6e>
 8001720:	2001      	movs	r0, #1
 8001722:	f7ff fea7 	bl	8001474 <set_climb>


	if( shield_pressed() ){ //if shield was just pressed
 8001726:	f7ff fe2f 	bl	8001388 <shield_pressed>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <update_input+0x86>
		load_audio(play_shield_out);
 8001730:	2005      	movs	r0, #5
 8001732:	f000 fccf 	bl	80020d4 <load_audio>
		player->shield = 1;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	71da      	strb	r2, [r3, #7]
	}else if( player->shield && !get_shield() ){ // if shield was just unequipped
		load_audio(play_shield_in);
		player->shield = 0;
	}
}
 800173c:	e00e      	b.n	800175c <update_input+0xa4>
	}else if( player->shield && !get_shield() ){ // if shield was just unequipped
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	79db      	ldrb	r3, [r3, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00a      	beq.n	800175c <update_input+0xa4>
 8001746:	f7ff feb7 	bl	80014b8 <get_shield>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d105      	bne.n	800175c <update_input+0xa4>
		load_audio(play_shield_in);
 8001750:	2006      	movs	r0, #6
 8001752:	f000 fcbf 	bl	80020d4 <load_audio>
		player->shield = 0;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	71da      	strb	r2, [r3, #7]
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <update_DK>:



void update_DK(DK_t *DK, bullet_t *bullet, player_t *player){
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b087      	sub	sp, #28
 8001768:	af02      	add	r7, sp, #8
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]

	ST7735_DrawImage(DK->x, DK->y, DKong_size[0], DKong_size[1], (const uint16_t*) black);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	785b      	ldrb	r3, [r3, #1]
 800177a:	461c      	mov	r4, r3
 800177c:	2219      	movs	r2, #25
 800177e:	2110      	movs	r1, #16
 8001780:	4b4e      	ldr	r3, [pc, #312]	@ (80018bc <update_DK+0x158>)
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	460b      	mov	r3, r1
 8001786:	4621      	mov	r1, r4
 8001788:	f7ff fd23 	bl	80011d2 <ST7735_DrawImage>
	switch(DK->state){
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	789b      	ldrb	r3, [r3, #2]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d04f      	beq.n	8001834 <update_DK+0xd0>
 8001794:	2b02      	cmp	r3, #2
 8001796:	dc68      	bgt.n	800186a <update_DK+0x106>
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <update_DK+0x3e>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d028      	beq.n	80017f2 <update_DK+0x8e>
 80017a0:	e063      	b.n	800186a <update_DK+0x106>
		case getting_pos:
			if(bullet[DK->bullet_index].state == selected){
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	78db      	ldrb	r3, [r3, #3]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	4413      	add	r3, r2
 80017ac:	78db      	ldrb	r3, [r3, #3]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d10e      	bne.n	80017d0 <update_DK+0x6c>
				DK->bullet_pos = bullet[DK->bullet_index].x;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	78db      	ldrb	r3, [r3, #3]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	4413      	add	r3, r2
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	711a      	strb	r2, [r3, #4]
				DK->state++;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	789b      	ldrb	r3, [r3, #2]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	709a      	strb	r2, [r3, #2]
			}else{
				DK->bullet_index= (DK->bullet_index+1)%5;
			}
			break;
 80017ce:	e04c      	b.n	800186a <update_DK+0x106>
				DK->bullet_index= (DK->bullet_index+1)%5;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	78db      	ldrb	r3, [r3, #3]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	4b3a      	ldr	r3, [pc, #232]	@ (80018c0 <update_DK+0x15c>)
 80017d8:	fb83 1302 	smull	r1, r3, r3, r2
 80017dc:	1059      	asrs	r1, r3, #1
 80017de:	17d3      	asrs	r3, r2, #31
 80017e0:	1ac9      	subs	r1, r1, r3
 80017e2:	460b      	mov	r3, r1
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	1ad1      	subs	r1, r2, r3
 80017ea:	b2ca      	uxtb	r2, r1
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	70da      	strb	r2, [r3, #3]
			break;
 80017f0:	e03b      	b.n	800186a <update_DK+0x106>
		case found_pos:
			if(DK->x < DK->bullet_pos) DK->x++;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d206      	bcs.n	800180c <update_DK+0xa8>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	701a      	strb	r2, [r3, #0]
			else if(DK->x > DK->bullet_pos) DK->x--;
			else DK->state++;
			break;
 800180a:	e02e      	b.n	800186a <update_DK+0x106>
			else if(DK->x > DK->bullet_pos) DK->x--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	781a      	ldrb	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	791b      	ldrb	r3, [r3, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	d906      	bls.n	8001826 <update_DK+0xc2>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	701a      	strb	r2, [r3, #0]
			break;
 8001824:	e021      	b.n	800186a <update_DK+0x106>
			else DK->state++;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	709a      	strb	r2, [r3, #2]
			break;
 8001832:	e01a      	b.n	800186a <update_DK+0x106>
		case at_pos:
			bullet[DK->bullet_index].state = moving;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4413      	add	r3, r2
 800183e:	2202      	movs	r2, #2
 8001840:	70da      	strb	r2, [r3, #3]
			DK->bullet_index = (DK->bullet_index+1)%5;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	78db      	ldrb	r3, [r3, #3]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	4b1d      	ldr	r3, [pc, #116]	@ (80018c0 <update_DK+0x15c>)
 800184a:	fb83 1302 	smull	r1, r3, r3, r2
 800184e:	1059      	asrs	r1, r3, #1
 8001850:	17d3      	asrs	r3, r2, #31
 8001852:	1ac9      	subs	r1, r1, r3
 8001854:	460b      	mov	r3, r1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	1ad1      	subs	r1, r2, r3
 800185c:	b2ca      	uxtb	r2, r1
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	70da      	strb	r2, [r3, #3]
			DK->state = getting_pos;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	709a      	strb	r2, [r3, #2]
			break;
 8001868:	bf00      	nop
	}

	if(player->lvl == LAST_LVL(ground_pos) && is_touching(player->x, 16,DK->x, DKong_size[0])){
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b06      	cmp	r3, #6
 8001870:	d111      	bne.n	8001896 <update_DK+0x132>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7858      	ldrb	r0, [r3, #1]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	2319      	movs	r3, #25
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2110      	movs	r1, #16
 8001880:	f7ff fecc 	bl	800161c <is_touching>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <update_DK+0x132>
		state = WIN;
 800188a:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <update_DK+0x160>)
 800188c:	2203      	movs	r2, #3
 800188e:	701a      	strb	r2, [r3, #0]
		load_audio(play_win);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 fc1f 	bl	80020d4 <load_audio>
	}

	ST7735_DrawImage(DK->x , DK->y, DKong_size[0], DKong_size[1], (const uint16_t*) DKong);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	461c      	mov	r4, r3
 80018a2:	2219      	movs	r2, #25
 80018a4:	2110      	movs	r1, #16
 80018a6:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <update_DK+0x164>)
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	460b      	mov	r3, r1
 80018ac:	4621      	mov	r1, r4
 80018ae:	f7ff fc90 	bl	80011d2 <ST7735_DrawImage>
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd90      	pop	{r4, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	0801d11c 	.word	0x0801d11c
 80018c0:	66666667 	.word	0x66666667
 80018c4:	200000f5 	.word	0x200000f5
 80018c8:	0801cdfc 	.word	0x0801cdfc

080018cc <update_player>:


void update_player(player_t *player, input_t *input, bullet_t *bullet) {
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	erase_player(player);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f9ed 	bl	8001cb8 <erase_player>
	static uint8_t animate = 0;

//	//lose animation
	if(player->hit && !get_shield()){
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	799b      	ldrb	r3, [r3, #6]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <update_player+0x32>
 80018e6:	f7ff fde7 	bl	80014b8 <get_shield>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d106      	bne.n	80018fe <update_player+0x32>
		load_audio(play_lose);
 80018f0:	2004      	movs	r0, #4
 80018f2:	f000 fbef 	bl	80020d4 <load_audio>
		state = LOSE;
 80018f6:	4b9a      	ldr	r3, [pc, #616]	@ (8001b60 <update_player+0x294>)
 80018f8:	2202      	movs	r2, #2
 80018fa:	701a      	strb	r2, [r3, #0]
		return;
 80018fc:	e1cd      	b.n	8001c9a <update_player+0x3ce>
	}else if( player->hit ){
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	799b      	ldrb	r3, [r3, #6]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <update_player+0x46>
		load_audio(play_punch);
 8001906:	2002      	movs	r0, #2
 8001908:	f000 fbe4 	bl	80020d4 <load_audio>
		player->hit = 0;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	719a      	strb	r2, [r3, #6]

	}

	//climbing animations
	if(get_climb() && player->climb == 0){
 8001912:	f7ff fdc5 	bl	80014a0 <get_climb>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d056      	beq.n	80019ca <update_player+0xfe>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	795b      	ldrb	r3, [r3, #5]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d152      	bne.n	80019ca <update_player+0xfe>
		player->x = ladder_pos[player->lvl];
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b8e      	ldr	r3, [pc, #568]	@ (8001b64 <update_player+0x298>)
 800192c:	5c9a      	ldrb	r2, [r3, r2]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	705a      	strb	r2, [r3, #1]
		player->lvl++;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	701a      	strb	r2, [r3, #0]
		player->y--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	789b      	ldrb	r3, [r3, #2]
 8001942:	3b01      	subs	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	709a      	strb	r2, [r3, #2]
		player->climb++;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	795b      	ldrb	r3, [r3, #5]
 800194e:	3301      	adds	r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	715a      	strb	r2, [r3, #5]
		player->motion ^= 1;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	791b      	ldrb	r3, [r3, #4]
 800195a:	f083 0301 	eor.w	r3, r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	711a      	strb	r2, [r3, #4]

		if(get_shield()) ST7735_DrawImage(player->x , player->y, shieldR_size[0], shieldR_size[1], (const uint16_t*) shieldR);
 8001964:	f7ff fda8 	bl	80014b8 <get_shield>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00e      	beq.n	800198c <update_player+0xc0>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	4618      	mov	r0, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	789b      	ldrb	r3, [r3, #2]
 8001978:	461c      	mov	r4, r3
 800197a:	220e      	movs	r2, #14
 800197c:	2110      	movs	r1, #16
 800197e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b68 <update_player+0x29c>)
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	460b      	mov	r3, r1
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff fc24 	bl	80011d2 <ST7735_DrawImage>
		else ST7735_DrawImage(player->x , player->y, climb_animate[player->motion].w, climb_animate[player->motion].h, (const uint16_t*) climb_animate[player->motion].data);
		return;
 800198a:	e186      	b.n	8001c9a <update_player+0x3ce>
		else ST7735_DrawImage(player->x , player->y, climb_animate[player->motion].w, climb_animate[player->motion].h, (const uint16_t*) climb_animate[player->motion].data);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	785b      	ldrb	r3, [r3, #1]
 8001990:	461c      	mov	r4, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	789b      	ldrb	r3, [r3, #2]
 8001996:	461d      	mov	r5, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	791b      	ldrb	r3, [r3, #4]
 800199c:	4a73      	ldr	r2, [pc, #460]	@ (8001b6c <update_player+0x2a0>)
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	889a      	ldrh	r2, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	791b      	ldrb	r3, [r3, #4]
 80019a8:	4970      	ldr	r1, [pc, #448]	@ (8001b6c <update_player+0x2a0>)
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	88d9      	ldrh	r1, [r3, #6]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	791b      	ldrb	r3, [r3, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b6c <update_player+0x2a0>)
 80019b8:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	460b      	mov	r3, r1
 80019c0:	4629      	mov	r1, r5
 80019c2:	4620      	mov	r0, r4
 80019c4:	f7ff fc05 	bl	80011d2 <ST7735_DrawImage>
		return;
 80019c8:	e167      	b.n	8001c9a <update_player+0x3ce>

	}else if(get_climb() && player->y == ground_pos[player->lvl]){
 80019ca:	f7ff fd69 	bl	80014a0 <get_climb>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00f      	beq.n	80019f4 <update_player+0x128>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	789a      	ldrb	r2, [r3, #2]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	4b64      	ldr	r3, [pc, #400]	@ (8001b70 <update_player+0x2a4>)
 80019e0:	5c5b      	ldrb	r3, [r3, r1]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d106      	bne.n	80019f4 <update_player+0x128>
		player->climb = 0;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	715a      	strb	r2, [r3, #5]
		set_climb(0);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fd41 	bl	8001474 <set_climb>
		return;
 80019f2:	e152      	b.n	8001c9a <update_player+0x3ce>
	}else if(get_climb()){
 80019f4:	f7ff fd54 	bl	80014a0 <get_climb>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d04c      	beq.n	8001a98 <update_player+0x1cc>

		if(animate >= 150){
 80019fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001b74 <update_player+0x2a8>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b95      	cmp	r3, #149	@ 0x95
 8001a04:	d90f      	bls.n	8001a26 <update_player+0x15a>
			player->y--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	789b      	ldrb	r3, [r3, #2]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	709a      	strb	r2, [r3, #2]
			player->motion ^= 1; //rotate through running animations
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	791b      	ldrb	r3, [r3, #4]
 8001a16:	f083 0301 	eor.w	r3, r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	711a      	strb	r2, [r3, #4]
			animate = 0;
 8001a20:	4b54      	ldr	r3, [pc, #336]	@ (8001b74 <update_player+0x2a8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
		}
		if(get_shield()) ST7735_DrawImage(player->x , player->y, shieldR_size[0], shieldR_size[1], (const uint16_t*) shieldR);
 8001a26:	f7ff fd47 	bl	80014b8 <get_shield>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00e      	beq.n	8001a4e <update_player+0x182>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	785b      	ldrb	r3, [r3, #1]
 8001a34:	4618      	mov	r0, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	789b      	ldrb	r3, [r3, #2]
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	220e      	movs	r2, #14
 8001a3e:	2110      	movs	r1, #16
 8001a40:	4b49      	ldr	r3, [pc, #292]	@ (8001b68 <update_player+0x29c>)
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	460b      	mov	r3, r1
 8001a46:	4621      	mov	r1, r4
 8001a48:	f7ff fbc3 	bl	80011d2 <ST7735_DrawImage>
 8001a4c:	e01d      	b.n	8001a8a <update_player+0x1be>
		else ST7735_DrawImage(player->x , player->y, climb_animate[player->motion].w, climb_animate[player->motion].h, (const uint16_t*) climb_animate[player->motion].data);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	785b      	ldrb	r3, [r3, #1]
 8001a52:	461c      	mov	r4, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	789b      	ldrb	r3, [r3, #2]
 8001a58:	461d      	mov	r5, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	791b      	ldrb	r3, [r3, #4]
 8001a5e:	4a43      	ldr	r2, [pc, #268]	@ (8001b6c <update_player+0x2a0>)
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	889a      	ldrh	r2, [r3, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	791b      	ldrb	r3, [r3, #4]
 8001a6a:	4940      	ldr	r1, [pc, #256]	@ (8001b6c <update_player+0x2a0>)
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	88d9      	ldrh	r1, [r3, #6]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	791b      	ldrb	r3, [r3, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <update_player+0x2a0>)
 8001a7a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	460b      	mov	r3, r1
 8001a82:	4629      	mov	r1, r5
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fba4 	bl	80011d2 <ST7735_DrawImage>

		animate++;
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b74 <update_player+0x2a8>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b38      	ldr	r3, [pc, #224]	@ (8001b74 <update_player+0x2a8>)
 8001a94:	701a      	strb	r2, [r3, #0]
		return;
 8001a96:	e100      	b.n	8001c9a <update_player+0x3ce>
	}

	//walking animations
	player->x = input->position;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	781a      	ldrb	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	705a      	strb	r2, [r3, #1]
	player->y = FLOOR_LVL(ground_pos[player->lvl]);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <update_player+0x2a4>)
 8001aa8:	5c9b      	ldrb	r3, [r3, r2]
 8001aaa:	3b11      	subs	r3, #17
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	709a      	strb	r2, [r3, #2]
	switch(input->slider){
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	785b      	ldrb	r3, [r3, #1]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	f200 80ef 	bhi.w	8001c9a <update_player+0x3ce>
 8001abc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac4 <update_player+0x1f8>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001b81 	.word	0x08001b81
 8001acc:	08001c0f 	.word	0x08001c0f
 8001ad0:	08001c55 	.word	0x08001c55
	case left:
		if(input->button_shield) ST7735_DrawImage(player->x , player->y, shieldL_size[0], shieldL_size[1], (const uint16_t*) shieldL);
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	78db      	ldrb	r3, [r3, #3]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00e      	beq.n	8001afa <update_player+0x22e>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	785b      	ldrb	r3, [r3, #1]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	789b      	ldrb	r3, [r3, #2]
 8001ae6:	461c      	mov	r4, r3
 8001ae8:	220e      	movs	r2, #14
 8001aea:	2110      	movs	r1, #16
 8001aec:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <update_player+0x2ac>)
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	460b      	mov	r3, r1
 8001af2:	4621      	mov	r1, r4
 8001af4:	f7ff fb6d 	bl	80011d2 <ST7735_DrawImage>
				player->motion ^= 1; //rotate through running animations
				animate = 0;
			}
			animate++;
		}
		break;
 8001af8:	e0cf      	b.n	8001c9a <update_player+0x3ce>
			ST7735_DrawImage(player->x , player->y, runL_animate[player->motion].w, runL_animate[player->motion].h, runL_animate[player->motion].data);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	461c      	mov	r4, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	789b      	ldrb	r3, [r3, #2]
 8001b04:	461d      	mov	r5, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	791b      	ldrb	r3, [r3, #4]
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b7c <update_player+0x2b0>)
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	889a      	ldrh	r2, [r3, #4]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	791b      	ldrb	r3, [r3, #4]
 8001b16:	4919      	ldr	r1, [pc, #100]	@ (8001b7c <update_player+0x2b0>)
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	88d9      	ldrh	r1, [r3, #6]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	791b      	ldrb	r3, [r3, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <update_player+0x2b0>)
 8001b26:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4629      	mov	r1, r5
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff fb4e 	bl	80011d2 <ST7735_DrawImage>
			if(animate >= 200){
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <update_player+0x2a8>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b3c:	d909      	bls.n	8001b52 <update_player+0x286>
				player->motion ^= 1; //rotate through running animations
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	711a      	strb	r2, [r3, #4]
				animate = 0;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <update_player+0x2a8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
			animate++;
 8001b52:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <update_player+0x2a8>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <update_player+0x2a8>)
 8001b5c:	701a      	strb	r2, [r3, #0]
		break;
 8001b5e:	e09c      	b.n	8001c9a <update_player+0x3ce>
 8001b60:	200000f5 	.word	0x200000f5
 8001b64:	0801db18 	.word	0x0801db18
 8001b68:	0801bf9c 	.word	0x0801bf9c
 8001b6c:	0801d43c 	.word	0x0801d43c
 8001b70:	0801db10 	.word	0x0801db10
 8001b74:	200000fe 	.word	0x200000fe
 8001b78:	0801c15c 	.word	0x0801c15c
 8001b7c:	0801d44c 	.word	0x0801d44c
	case right:
		if(get_shield()) ST7735_DrawImage(player->x , player->y, shieldR_size[0], shieldR_size[1], (const uint16_t*) shieldR);
 8001b80:	f7ff fc9a 	bl	80014b8 <get_shield>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00e      	beq.n	8001ba8 <update_player+0x2dc>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	789b      	ldrb	r3, [r3, #2]
 8001b94:	461c      	mov	r4, r3
 8001b96:	220e      	movs	r2, #14
 8001b98:	2110      	movs	r1, #16
 8001b9a:	4b41      	ldr	r3, [pc, #260]	@ (8001ca0 <update_player+0x3d4>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	f7ff fb16 	bl	80011d2 <ST7735_DrawImage>
				player->motion ^= 1; //rotate through running animations
				animate = 0;
			}
			animate++;
		}
		break;
 8001ba6:	e078      	b.n	8001c9a <update_player+0x3ce>
			ST7735_DrawImage(player->x , player->y, runR_animate[player->motion].w, runR_animate[player->motion].h, runR_animate[player->motion].data);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	461c      	mov	r4, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	789b      	ldrb	r3, [r3, #2]
 8001bb2:	461d      	mov	r5, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	791b      	ldrb	r3, [r3, #4]
 8001bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ca4 <update_player+0x3d8>)
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	889a      	ldrh	r2, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	791b      	ldrb	r3, [r3, #4]
 8001bc4:	4937      	ldr	r1, [pc, #220]	@ (8001ca4 <update_player+0x3d8>)
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	88d9      	ldrh	r1, [r3, #6]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	791b      	ldrb	r3, [r3, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <update_player+0x3d8>)
 8001bd4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4629      	mov	r1, r5
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff faf7 	bl	80011d2 <ST7735_DrawImage>
			if(animate >= 200){
 8001be4:	4b30      	ldr	r3, [pc, #192]	@ (8001ca8 <update_player+0x3dc>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2bc7      	cmp	r3, #199	@ 0xc7
 8001bea:	d909      	bls.n	8001c00 <update_player+0x334>
				player->motion ^= 1; //rotate through running animations
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	f083 0301 	eor.w	r3, r3, #1
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	711a      	strb	r2, [r3, #4]
				animate = 0;
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <update_player+0x3dc>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			animate++;
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <update_player+0x3dc>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b27      	ldr	r3, [pc, #156]	@ (8001ca8 <update_player+0x3dc>)
 8001c0a:	701a      	strb	r2, [r3, #0]
		break;
 8001c0c:	e045      	b.n	8001c9a <update_player+0x3ce>
	case idle_left:
		if(get_shield()) ST7735_DrawImage(player->x , player->y, shieldL_size[0], shieldL_size[1], (const uint16_t*) shieldL);
 8001c0e:	f7ff fc53 	bl	80014b8 <get_shield>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00e      	beq.n	8001c36 <update_player+0x36a>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	789b      	ldrb	r3, [r3, #2]
 8001c22:	461c      	mov	r4, r3
 8001c24:	220e      	movs	r2, #14
 8001c26:	2110      	movs	r1, #16
 8001c28:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <update_player+0x3e0>)
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4621      	mov	r1, r4
 8001c30:	f7ff facf 	bl	80011d2 <ST7735_DrawImage>
		else ST7735_DrawImage(player->x , player->y, standL_size[0], standL_size[1], (const uint16_t*) standL);
		break;
 8001c34:	e031      	b.n	8001c9a <update_player+0x3ce>
		else ST7735_DrawImage(player->x , player->y, standL_size[0], standL_size[1], (const uint16_t*) standL);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	785b      	ldrb	r3, [r3, #1]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	789b      	ldrb	r3, [r3, #2]
 8001c40:	461c      	mov	r4, r3
 8001c42:	220c      	movs	r2, #12
 8001c44:	2110      	movs	r1, #16
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <update_player+0x3e4>)
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	f7ff fac0 	bl	80011d2 <ST7735_DrawImage>
		break;
 8001c52:	e022      	b.n	8001c9a <update_player+0x3ce>
	case idle_right:
		if(get_shield()) ST7735_DrawImage(player->x , player->y, shieldR_size[0], shieldR_size[1], (const uint16_t*) shieldR);
 8001c54:	f7ff fc30 	bl	80014b8 <get_shield>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00e      	beq.n	8001c7c <update_player+0x3b0>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	4618      	mov	r0, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	461c      	mov	r4, r3
 8001c6a:	220e      	movs	r2, #14
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <update_player+0x3d4>)
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	460b      	mov	r3, r1
 8001c74:	4621      	mov	r1, r4
 8001c76:	f7ff faac 	bl	80011d2 <ST7735_DrawImage>
		else ST7735_DrawImage(player->x , player->y, standR_size[0], standR_size[1], (const uint16_t*) standR);
		break;
 8001c7a:	e00d      	b.n	8001c98 <update_player+0x3cc>
		else ST7735_DrawImage(player->x , player->y, standR_size[0], standR_size[1], (const uint16_t*) standR);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	4618      	mov	r0, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	789b      	ldrb	r3, [r3, #2]
 8001c86:	461c      	mov	r4, r3
 8001c88:	220c      	movs	r2, #12
 8001c8a:	2110      	movs	r1, #16
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <update_player+0x3e8>)
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	460b      	mov	r3, r1
 8001c92:	4621      	mov	r1, r4
 8001c94:	f7ff fa9d 	bl	80011d2 <ST7735_DrawImage>
		break;
 8001c98:	bf00      	nop
	}

}
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca0:	0801bf9c 	.word	0x0801bf9c
 8001ca4:	0801d45c 	.word	0x0801d45c
 8001ca8:	200000fe 	.word	0x200000fe
 8001cac:	0801c15c 	.word	0x0801c15c
 8001cb0:	0801be1c 	.word	0x0801be1c
 8001cb4:	0801bc9c 	.word	0x0801bc9c

08001cb8 <erase_player>:

void erase_player(player_t *player){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]

	ST7735_DrawImage(player->x , player->y, 16, 16, (const uint16_t*) black);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	785b      	ldrb	r3, [r3, #1]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	789b      	ldrb	r3, [r3, #2]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d78 <erase_player+0xc0>)
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	f7ff fa7d 	bl	80011d2 <ST7735_DrawImage>
	if(player->y == ground_pos[player->lvl]){ //redraw ladder and ground
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	789a      	ldrb	r2, [r3, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <erase_player+0xc4>)
 8001ce4:	5c5b      	ldrb	r3, [r3, r1]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d120      	bne.n	8001d2c <erase_player+0x74>

		ST7735_DrawImage(ladder_pos[player->lvl-1], ground_pos[player->lvl-1]-19, 10, 19,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	4a23      	ldr	r2, [pc, #140]	@ (8001d80 <erase_player+0xc8>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d7c <erase_player+0xc4>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	3b13      	subs	r3, #19
 8001d02:	b299      	uxth	r1, r3
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <erase_player+0xcc>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2313      	movs	r3, #19
 8001d0a:	220a      	movs	r2, #10
 8001d0c:	f7ff fa61 	bl	80011d2 <ST7735_DrawImage>
				(const uint16_t*) ladder);
		ST7735_DrawImage(0, ground_pos[player->lvl], 128, 5,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <erase_player+0xc4>)
 8001d18:	5c9b      	ldrb	r3, [r3, r2]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <erase_player+0xd0>)
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2305      	movs	r3, #5
 8001d22:	2280      	movs	r2, #128	@ 0x80
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff fa54 	bl	80011d2 <ST7735_DrawImage>
	}else if(is_touching(player->x, 15, ladder_pos[player->lvl], 12)){

		ST7735_DrawImage(ladder_pos[player->lvl], ground_pos[player->lvl]-19, 10, 19,
						(const uint16_t*) ladder);
	}
}
 8001d2a:	e020      	b.n	8001d6e <erase_player+0xb6>
	}else if(is_touching(player->x, 15, ladder_pos[player->lvl], 12)){
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	7858      	ldrb	r0, [r3, #1]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <erase_player+0xc8>)
 8001d38:	5c9a      	ldrb	r2, [r3, r2]
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	f7ff fc6d 	bl	800161c <is_touching>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <erase_player+0xb6>
		ST7735_DrawImage(ladder_pos[player->lvl], ground_pos[player->lvl]-19, 10, 19,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <erase_player+0xc8>)
 8001d50:	5c9b      	ldrb	r3, [r3, r2]
 8001d52:	4618      	mov	r0, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <erase_player+0xc4>)
 8001d5c:	5c9b      	ldrb	r3, [r3, r2]
 8001d5e:	3b13      	subs	r3, #19
 8001d60:	b299      	uxth	r1, r3
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <erase_player+0xcc>)
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2313      	movs	r3, #19
 8001d68:	220a      	movs	r2, #10
 8001d6a:	f7ff fa32 	bl	80011d2 <ST7735_DrawImage>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	0801d11c 	.word	0x0801d11c
 8001d7c:	0801db10 	.word	0x0801db10
 8001d80:	0801db18 	.word	0x0801db18
 8001d84:	0801d994 	.word	0x0801d994
 8001d88:	0801d494 	.word	0x0801d494

08001d8c <erase_bullet>:



void erase_bullet(bullet_t *bullet){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 5; i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e094      	b.n	8001ec4 <erase_bullet+0x138>
		ST7735_DrawImage(bullet[i].x , bullet[i].y, 4, 5, (const uint16_t*) black);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	785b      	ldrb	r3, [r3, #1]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4b49      	ldr	r3, [pc, #292]	@ (8001ed8 <erase_bullet+0x14c>)
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2305      	movs	r3, #5
 8001db8:	2204      	movs	r2, #4
 8001dba:	f7ff fa0a 	bl	80011d2 <ST7735_DrawImage>

		if(is_touching(bullet[i].y, bulletD_size[1], ground_pos[bullet[i].lvl], 1) && bullet[i].lvl == 0) //redraw ground
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	7858      	ldrb	r0, [r3, #1]
 8001dc8:	2305      	movs	r3, #5
 8001dca:	b2d9      	uxtb	r1, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	789b      	ldrb	r3, [r3, #2]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <erase_bullet+0x150>)
 8001dda:	5c9a      	ldrb	r2, [r3, r2]
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f7ff fc1d 	bl	800161c <is_touching>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d017      	beq.n	8001e18 <erase_bullet+0x8c>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	789b      	ldrb	r3, [r3, #2]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d110      	bne.n	8001e18 <erase_bullet+0x8c>
			ST7735_DrawImage(0, ground_pos[bullet[i].lvl], 128, 1,(const uint16_t*) ground);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	789b      	ldrb	r3, [r3, #2]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <erase_bullet+0x150>)
 8001e04:	5c9b      	ldrb	r3, [r3, r2]
 8001e06:	4619      	mov	r1, r3
 8001e08:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <erase_bullet+0x154>)
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	2280      	movs	r2, #128	@ 0x80
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff f9de 	bl	80011d2 <ST7735_DrawImage>
 8001e16:	e024      	b.n	8001e62 <erase_bullet+0xd6>
		else if(is_touching(bullet[i].y, bulletD_size[1], ground_pos[bullet[i].lvl], 5))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	7858      	ldrb	r0, [r3, #1]
 8001e22:	2305      	movs	r3, #5
 8001e24:	b2d9      	uxtb	r1, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	789b      	ldrb	r3, [r3, #2]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <erase_bullet+0x150>)
 8001e34:	5c9a      	ldrb	r2, [r3, r2]
 8001e36:	2305      	movs	r3, #5
 8001e38:	f7ff fbf0 	bl	800161c <is_touching>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00f      	beq.n	8001e62 <erase_bullet+0xd6>
				ST7735_DrawImage(0, ground_pos[bullet[i].lvl], 128, 5,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	789b      	ldrb	r3, [r3, #2]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b23      	ldr	r3, [pc, #140]	@ (8001edc <erase_bullet+0x150>)
 8001e50:	5c9b      	ldrb	r3, [r3, r2]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <erase_bullet+0x154>)
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2305      	movs	r3, #5
 8001e5a:	2280      	movs	r2, #128	@ 0x80
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff f9b8 	bl	80011d2 <ST7735_DrawImage>
															(const uint16_t*) ground);

		if(is_touching(bullet[i].x, bulletD_size[0], ladder_pos[bullet[i].lvl], 12)) //redraw ladder
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	7818      	ldrb	r0, [r3, #0]
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	b2d9      	uxtb	r1, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	789b      	ldrb	r3, [r3, #2]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <erase_bullet+0x158>)
 8001e7e:	5c9a      	ldrb	r2, [r3, r2]
 8001e80:	230c      	movs	r3, #12
 8001e82:	f7ff fbcb 	bl	800161c <is_touching>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d018      	beq.n	8001ebe <erase_bullet+0x132>
			ST7735_DrawImage(ladder_pos[bullet[i].lvl], ground_pos[bullet[i].lvl]-19, 10, 19,
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	789b      	ldrb	r3, [r3, #2]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <erase_bullet+0x158>)
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	789b      	ldrb	r3, [r3, #2]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <erase_bullet+0x150>)
 8001eac:	5c9b      	ldrb	r3, [r3, r2]
 8001eae:	3b13      	subs	r3, #19
 8001eb0:	b299      	uxth	r1, r3
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee8 <erase_bullet+0x15c>)
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2313      	movs	r3, #19
 8001eb8:	220a      	movs	r2, #10
 8001eba:	f7ff f98a 	bl	80011d2 <ST7735_DrawImage>
	for(int i = 0; i < 5; i++){
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	f77f af67 	ble.w	8001d9a <erase_bullet+0xe>
				(const uint16_t*) ladder);
	}
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	0801d11c 	.word	0x0801d11c
 8001edc:	0801db10 	.word	0x0801db10
 8001ee0:	0801d494 	.word	0x0801d494
 8001ee4:	0801db18 	.word	0x0801db18
 8001ee8:	0801d994 	.word	0x0801d994

08001eec <update_bullet>:



void update_bullet(bullet_t *bullet, player_t *player){
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
	static uint8_t animate = 0;

	for(int i = 0; i < 5; i++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e0a9      	b.n	8002050 <update_bullet+0x164>

		switch(bullet[i].state){
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	78db      	ldrb	r3, [r3, #3]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d024      	beq.n	8001f54 <update_bullet+0x68>
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	dc7c      	bgt.n	8002008 <update_bullet+0x11c>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <update_bullet+0x2c>
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d011      	beq.n	8001f3a <update_bullet+0x4e>
 8001f16:	e077      	b.n	8002008 <update_bullet+0x11c>
			case unselected:
				bullet[i].x = generate_number();
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	18d4      	adds	r4, r2, r3
 8001f20:	f000 fc62 	bl	80027e8 <generate_number>
 8001f24:	4603      	mov	r3, r0
 8001f26:	7023      	strb	r3, [r4, #0]
				bullet[i].state++;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	78da      	ldrb	r2, [r3, #3]
 8001f32:	3201      	adds	r2, #1
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	70da      	strb	r2, [r3, #3]
				break;
 8001f38:	e066      	b.n	8002008 <update_bullet+0x11c>
			case selected:
				bullet[i].lvl = LAST_LVL(ground_pos);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	2206      	movs	r2, #6
 8001f44:	709a      	strb	r2, [r3, #2]
				bullet[i].y = ground_pos[ LAST_LVL(ground_pos) ];
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2211      	movs	r2, #17
 8001f50:	705a      	strb	r2, [r3, #1]
				break;
 8001f52:	e059      	b.n	8002008 <update_bullet+0x11c>
			case moving:
				if(bullet[i].y > 160){
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	785b      	ldrb	r3, [r3, #1]
 8001f5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001f60:	d90c      	bls.n	8001f7c <update_bullet+0x90>
					bullet[i].y = ground_pos[ LAST_LVL(ground_pos) ];
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	2211      	movs	r2, #17
 8001f6c:	705a      	strb	r2, [r3, #1]
					bullet[i].state = unselected;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	2200      	movs	r2, #0
 8001f78:	70da      	strb	r2, [r3, #3]
					if(bullet[i].y > ground_pos[bullet[i].lvl]+5) bullet[i].lvl--; // if bullet has passed a ground lvl


					animate++;
				}
				break;
 8001f7a:	e044      	b.n	8002006 <update_bullet+0x11a>
					if(animate == 200){
 8001f7c:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <update_bullet+0x178>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2bc8      	cmp	r3, #200	@ 0xc8
 8001f82:	d121      	bne.n	8001fc8 <update_bullet+0xdc>
						erase_bullet(bullet);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff01 	bl	8001d8c <erase_bullet>
						bullet[i].y++;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	785a      	ldrb	r2, [r3, #1]
 8001f94:	3201      	adds	r2, #1
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	705a      	strb	r2, [r3, #1]
						ST7735_DrawImage(bullet[i].x, bullet[i].y, bulletD_size[0], bulletD_size[1],
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8002068 <update_bullet+0x17c>)
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	f7ff f908 	bl	80011d2 <ST7735_DrawImage>
						animate = 0;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <update_bullet+0x178>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
					if(bullet[i].y > ground_pos[bullet[i].lvl]+5) bullet[i].lvl--; // if bullet has passed a ground lvl
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <update_bullet+0x180>)
 8001fe2:	5c9b      	ldrb	r3, [r3, r2]
 8001fe4:	3305      	adds	r3, #5
 8001fe6:	4299      	cmp	r1, r3
 8001fe8:	dd07      	ble.n	8001ffa <update_bullet+0x10e>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	789a      	ldrb	r2, [r3, #2]
 8001ff4:	3a01      	subs	r2, #1
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	709a      	strb	r2, [r3, #2]
					animate++;
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <update_bullet+0x178>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <update_bullet+0x178>)
 8002004:	701a      	strb	r2, [r3, #0]
				break;
 8002006:	bf00      	nop
		}

		if(is_touching(bullet[i].x, bulletD_size[0],player->x, 16) && is_touching( bullet[i].y, bulletD_size[1], player->y, 16 )){
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	7818      	ldrb	r0, [r3, #0]
 8002012:	2304      	movs	r3, #4
 8002014:	b2d9      	uxtb	r1, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	785a      	ldrb	r2, [r3, #1]
 800201a:	2310      	movs	r3, #16
 800201c:	f7ff fafe 	bl	800161c <is_touching>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d011      	beq.n	800204a <update_bullet+0x15e>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	7858      	ldrb	r0, [r3, #1]
 8002030:	2305      	movs	r3, #5
 8002032:	b2d9      	uxtb	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	789a      	ldrb	r2, [r3, #2]
 8002038:	2310      	movs	r3, #16
 800203a:	f7ff faef 	bl	800161c <is_touching>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <update_bullet+0x15e>
			player->hit = 1;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	719a      	strb	r2, [r3, #6]
	for(int i = 0; i < 5; i++){
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b04      	cmp	r3, #4
 8002054:	f77f af52 	ble.w	8001efc <update_bullet+0x10>
		}
	}
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}
 8002062:	bf00      	nop
 8002064:	200000ff 	.word	0x200000ff
 8002068:	0801d46c 	.word	0x0801d46c
 800206c:	0801db10 	.word	0x0801db10

08002070 <update_audio>:


void update_audio(){
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
	for(int i = 0; i < count; i++){
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	e016      	b.n	80020aa <update_audio+0x3a>
		play_audio(  files_audio[ audios[i] ], fileslen_audio[ audios[i] ] );
 800207c:	4a11      	ldr	r2, [pc, #68]	@ (80020c4 <update_audio+0x54>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <update_audio+0x58>)
 8002088:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800208c:	490d      	ldr	r1, [pc, #52]	@ (80020c4 <update_audio+0x54>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	440b      	add	r3, r1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <update_audio+0x5c>)
 8002098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f7ff f91e 	bl	80012e0 <play_audio>
	for(int i = 0; i < count; i++){
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3301      	adds	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <update_audio+0x60>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4293      	cmp	r3, r2
 80020b4:	dbe2      	blt.n	800207c <update_audio+0xc>
	}
	count = 0;
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <update_audio+0x60>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]

}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200000f8 	.word	0x200000f8
 80020c8:	2000000c 	.word	0x2000000c
 80020cc:	0801db20 	.word	0x0801db20
 80020d0:	200000fd 	.word	0x200000fd

080020d4 <load_audio>:

void load_audio(sound_t audio){
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
	audios[count++] = audio;
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <load_audio+0x2c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	b2d1      	uxtb	r1, r2
 80020e6:	4a06      	ldr	r2, [pc, #24]	@ (8002100 <load_audio+0x2c>)
 80020e8:	7011      	strb	r1, [r2, #0]
 80020ea:	4619      	mov	r1, r3
 80020ec:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <load_audio+0x30>)
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	5453      	strb	r3, [r2, r1]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200000fd 	.word	0x200000fd
 8002104:	200000f8 	.word	0x200000f8

08002108 <gameplay>:





void gameplay() {
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af04      	add	r7, sp, #16
	static player_t player;
	static input_t input;
	static bullet_t bullet[5];
	static DK_t donkey_kong;

	if (state == STARTUP) {
 800210e:	4b3f      	ldr	r3, [pc, #252]	@ (800220c <gameplay+0x104>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d119      	bne.n	800214a <gameplay+0x42>
		create_map();
 8002116:	f7ff fa37 	bl	8001588 <create_map>
		start_slider();
 800211a:	f000 fb81 	bl	8002820 <start_slider>
		ST7735_Init();
 800211e:	f7fe fef7 	bl	8000f10 <ST7735_Init>
		player_Init(&player);
 8002122:	483b      	ldr	r0, [pc, #236]	@ (8002210 <gameplay+0x108>)
 8002124:	f7ff f9d4 	bl	80014d0 <player_Init>
		DK_Init(&donkey_kong);
 8002128:	483a      	ldr	r0, [pc, #232]	@ (8002214 <gameplay+0x10c>)
 800212a:	f7ff f9f3 	bl	8001514 <DK_Init>
		bullet_Init(bullet);
 800212e:	483a      	ldr	r0, [pc, #232]	@ (8002218 <gameplay+0x110>)
 8002130:	f7ff fa03 	bl	800153a <bullet_Init>
		load_audio(play_ready);
 8002134:	2001      	movs	r0, #1
 8002136:	f7ff ffcd 	bl	80020d4 <load_audio>
		HAL_Delay(700);
 800213a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800213e:	f000 ff11 	bl	8002f64 <HAL_Delay>
		state = GAMEPLAY;
 8002142:	4b32      	ldr	r3, [pc, #200]	@ (800220c <gameplay+0x104>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
		ST7735_WriteString(20, 80, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK);
		HAL_Delay(700);
		state = !climb_pressed() ? state: STARTUP;
	}
}
 8002148:	e05d      	b.n	8002206 <gameplay+0xfe>
	}else if(state == GAMEPLAY){
 800214a:	4b30      	ldr	r3, [pc, #192]	@ (800220c <gameplay+0x104>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d114      	bne.n	800217c <gameplay+0x74>
		update_input(&player, &input);
 8002152:	4932      	ldr	r1, [pc, #200]	@ (800221c <gameplay+0x114>)
 8002154:	482e      	ldr	r0, [pc, #184]	@ (8002210 <gameplay+0x108>)
 8002156:	f7ff faaf 	bl	80016b8 <update_input>
		update_player(&player,&input, bullet);
 800215a:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <gameplay+0x110>)
 800215c:	492f      	ldr	r1, [pc, #188]	@ (800221c <gameplay+0x114>)
 800215e:	482c      	ldr	r0, [pc, #176]	@ (8002210 <gameplay+0x108>)
 8002160:	f7ff fbb4 	bl	80018cc <update_player>
		update_bullet(bullet, &player);
 8002164:	492a      	ldr	r1, [pc, #168]	@ (8002210 <gameplay+0x108>)
 8002166:	482c      	ldr	r0, [pc, #176]	@ (8002218 <gameplay+0x110>)
 8002168:	f7ff fec0 	bl	8001eec <update_bullet>
		update_DK(&donkey_kong, bullet, &player);
 800216c:	4a28      	ldr	r2, [pc, #160]	@ (8002210 <gameplay+0x108>)
 800216e:	492a      	ldr	r1, [pc, #168]	@ (8002218 <gameplay+0x110>)
 8002170:	4828      	ldr	r0, [pc, #160]	@ (8002214 <gameplay+0x10c>)
 8002172:	f7ff faf7 	bl	8001764 <update_DK>
		update_audio();
 8002176:	f7ff ff7b 	bl	8002070 <update_audio>
}
 800217a:	e044      	b.n	8002206 <gameplay+0xfe>
	}else if(state == WIN){
 800217c:	4b23      	ldr	r3, [pc, #140]	@ (800220c <gameplay+0x104>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d120      	bne.n	80021c6 <gameplay+0xbe>
		ST7735_FillScreen(ST7735_BLACK);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff f813 	bl	80011b0 <ST7735_FillScreen>
		ST7735_WriteString(20, 80, "YOU WIN", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 800218a:	4b25      	ldr	r3, [pc, #148]	@ (8002220 <gameplay+0x118>)
 800218c:	2200      	movs	r2, #0
 800218e:	9202      	str	r2, [sp, #8]
 8002190:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002194:	9201      	str	r2, [sp, #4]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	9200      	str	r2, [sp, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a21      	ldr	r2, [pc, #132]	@ (8002224 <gameplay+0x11c>)
 800219e:	2150      	movs	r1, #80	@ 0x50
 80021a0:	2014      	movs	r0, #20
 80021a2:	f7fe ff46 	bl	8001032 <ST7735_WriteString>
		HAL_Delay(700);
 80021a6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80021aa:	f000 fedb 	bl	8002f64 <HAL_Delay>
		state = !climb_pressed() ? state: STARTUP;
 80021ae:	f7ff f8db 	bl	8001368 <climb_pressed>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <gameplay+0xb6>
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <gameplay+0x104>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	e000      	b.n	80021c0 <gameplay+0xb8>
 80021be:	2300      	movs	r3, #0
 80021c0:	4a12      	ldr	r2, [pc, #72]	@ (800220c <gameplay+0x104>)
 80021c2:	7013      	strb	r3, [r2, #0]
}
 80021c4:	e01f      	b.n	8002206 <gameplay+0xfe>
		ST7735_FillScreen(ST7735_BLACK);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7fe fff2 	bl	80011b0 <ST7735_FillScreen>
		ST7735_WriteString(20, 80, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK);
 80021cc:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <gameplay+0x118>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	9202      	str	r2, [sp, #8]
 80021d2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80021d6:	9201      	str	r2, [sp, #4]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	9200      	str	r2, [sp, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <gameplay+0x120>)
 80021e0:	2150      	movs	r1, #80	@ 0x50
 80021e2:	2014      	movs	r0, #20
 80021e4:	f7fe ff25 	bl	8001032 <ST7735_WriteString>
		HAL_Delay(700);
 80021e8:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80021ec:	f000 feba 	bl	8002f64 <HAL_Delay>
		state = !climb_pressed() ? state: STARTUP;
 80021f0:	f7ff f8ba 	bl	8001368 <climb_pressed>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <gameplay+0xf8>
 80021fa:	4b04      	ldr	r3, [pc, #16]	@ (800220c <gameplay+0x104>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	e000      	b.n	8002202 <gameplay+0xfa>
 8002200:	2300      	movs	r3, #0
 8002202:	4a02      	ldr	r2, [pc, #8]	@ (800220c <gameplay+0x104>)
 8002204:	7013      	strb	r3, [r2, #0]
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	200000f5 	.word	0x200000f5
 8002210:	20000100 	.word	0x20000100
 8002214:	20000108 	.word	0x20000108
 8002218:	20000110 	.word	0x20000110
 800221c:	20000124 	.word	0x20000124
 8002220:	20000000 	.word	0x20000000
 8002224:	08005a34 	.word	0x08005a34
 8002228:	08005a3c 	.word	0x08005a3c

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002230:	f000 fe26 	bl	8002e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002234:	f000 f812 	bl	800225c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002238:	f000 fa1a 	bl	8002670 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800223c:	f000 f9ee 	bl	800261c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002240:	f000 f878 	bl	8002334 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002244:	f000 f94e 	bl	80024e4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002248:	f000 f99a 	bl	8002580 <MX_TIM5_Init>
  MX_SPI2_Init();
 800224c:	f000 f8c4 	bl	80023d8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002250:	f000 f8f8 	bl	8002444 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		gameplay();
 8002254:	f7ff ff58 	bl	8002108 <gameplay>
 8002258:	e7fc      	b.n	8002254 <main+0x28>
	...

0800225c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b094      	sub	sp, #80	@ 0x50
 8002260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002262:	f107 0320 	add.w	r3, r7, #32
 8002266:	2230      	movs	r2, #48	@ 0x30
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fbaa 	bl	80059c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	4b29      	ldr	r3, [pc, #164]	@ (800232c <SystemClock_Config+0xd0>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	4a28      	ldr	r2, [pc, #160]	@ (800232c <SystemClock_Config+0xd0>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800228e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002290:	4b26      	ldr	r3, [pc, #152]	@ (800232c <SystemClock_Config+0xd0>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	4b23      	ldr	r3, [pc, #140]	@ (8002330 <SystemClock_Config+0xd4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022a8:	4a21      	ldr	r2, [pc, #132]	@ (8002330 <SystemClock_Config+0xd4>)
 80022aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <SystemClock_Config+0xd4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c0:	2301      	movs	r3, #1
 80022c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c4:	2310      	movs	r3, #16
 80022c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c8:	2302      	movs	r3, #2
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022cc:	2300      	movs	r3, #0
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022d0:	2310      	movs	r3, #16
 80022d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80022d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022da:	2304      	movs	r3, #4
 80022dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022de:	2307      	movs	r3, #7
 80022e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 fcfa 	bl	8003ce0 <HAL_RCC_OscConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022f2:	f000 fa73 	bl	80027dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f6:	230f      	movs	r3, #15
 80022f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022fa:	2302      	movs	r3, #2
 80022fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2102      	movs	r1, #2
 8002312:	4618      	mov	r0, r3
 8002314:	f001 ff5c 	bl	80041d0 <HAL_RCC_ClockConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800231e:	f000 fa5d 	bl	80027dc <Error_Handler>
  }
}
 8002322:	bf00      	nop
 8002324:	3750      	adds	r7, #80	@ 0x50
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40007000 	.word	0x40007000

08002334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800233a:	463b      	mov	r3, r7
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002346:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002348:	4a21      	ldr	r2, [pc, #132]	@ (80023d0 <MX_ADC1_Init+0x9c>)
 800234a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800234c:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <MX_ADC1_Init+0x98>)
 800234e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002352:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002354:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <MX_ADC1_Init+0x98>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002360:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002362:	2201      	movs	r2, #1
 8002364:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002366:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800236e:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002370:	2200      	movs	r2, #0
 8002372:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002376:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <MX_ADC1_Init+0xa0>)
 8002378:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800237a:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <MX_ADC1_Init+0x98>)
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002380:	4b12      	ldr	r3, [pc, #72]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002382:	2201      	movs	r2, #1
 8002384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002386:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002390:	2201      	movs	r2, #1
 8002392:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002394:	480d      	ldr	r0, [pc, #52]	@ (80023cc <MX_ADC1_Init+0x98>)
 8002396:	f000 fe09 	bl	8002fac <HAL_ADC_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80023a0:	f000 fa1c 	bl	80027dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80023a4:	230e      	movs	r3, #14
 80023a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023a8:	2301      	movs	r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b0:	463b      	mov	r3, r7
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	@ (80023cc <MX_ADC1_Init+0x98>)
 80023b6:	f000 ff89 	bl	80032cc <HAL_ADC_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023c0:	f000 fa0c 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000128 	.word	0x20000128
 80023d0:	40012000 	.word	0x40012000
 80023d4:	0f000001 	.word	0x0f000001

080023d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80023dc:	4b17      	ldr	r3, [pc, #92]	@ (800243c <MX_SPI2_Init+0x64>)
 80023de:	4a18      	ldr	r2, [pc, #96]	@ (8002440 <MX_SPI2_Init+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <MX_SPI2_Init+0x64>)
 80023e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023ea:	4b14      	ldr	r3, [pc, #80]	@ (800243c <MX_SPI2_Init+0x64>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023f0:	4b12      	ldr	r3, [pc, #72]	@ (800243c <MX_SPI2_Init+0x64>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f6:	4b11      	ldr	r3, [pc, #68]	@ (800243c <MX_SPI2_Init+0x64>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <MX_SPI2_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <MX_SPI2_Init+0x64>)
 8002404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002408:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <MX_SPI2_Init+0x64>)
 800240c:	2200      	movs	r2, #0
 800240e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002410:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <MX_SPI2_Init+0x64>)
 8002412:	2200      	movs	r2, #0
 8002414:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <MX_SPI2_Init+0x64>)
 8002418:	2200      	movs	r2, #0
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800241c:	4b07      	ldr	r3, [pc, #28]	@ (800243c <MX_SPI2_Init+0x64>)
 800241e:	2200      	movs	r2, #0
 8002420:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <MX_SPI2_Init+0x64>)
 8002424:	220a      	movs	r2, #10
 8002426:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <MX_SPI2_Init+0x64>)
 800242a:	f002 f8f1 	bl	8004610 <HAL_SPI_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002434:	f000 f9d2 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000170 	.word	0x20000170
 8002440:	40003800 	.word	0x40003800

08002444 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	463b      	mov	r3, r7
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002460:	4b1e      	ldr	r3, [pc, #120]	@ (80024dc <MX_TIM1_Init+0x98>)
 8002462:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <MX_TIM1_Init+0x9c>)
 8002464:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <MX_TIM1_Init+0x98>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246c:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <MX_TIM1_Init+0x98>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7620;
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <MX_TIM1_Init+0x98>)
 8002474:	f641 52c4 	movw	r2, #7620	@ 0x1dc4
 8002478:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <MX_TIM1_Init+0x98>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002480:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <MX_TIM1_Init+0x98>)
 8002482:	2200      	movs	r2, #0
 8002484:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <MX_TIM1_Init+0x98>)
 8002488:	2280      	movs	r2, #128	@ 0x80
 800248a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800248c:	4813      	ldr	r0, [pc, #76]	@ (80024dc <MX_TIM1_Init+0x98>)
 800248e:	f002 fb69 	bl	8004b64 <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002498:	f000 f9a0 	bl	80027dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <MX_TIM1_Init+0x98>)
 80024aa:	f002 fd2c 	bl	8004f06 <HAL_TIM_ConfigClockSource>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024b4:	f000 f992 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	4619      	mov	r1, r3
 80024c4:	4805      	ldr	r0, [pc, #20]	@ (80024dc <MX_TIM1_Init+0x98>)
 80024c6:	f002 ff37 	bl	8005338 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80024d0:	f000 f984 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000054 	.word	0x20000054
 80024e0:	40010000 	.word	0x40010000

080024e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	463b      	mov	r3, r7
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <MX_TIM2_Init+0x94>)
 8002502:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002506:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <MX_TIM2_Init+0x94>)
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <MX_TIM2_Init+0x94>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2800000;
 8002514:	4b18      	ldr	r3, [pc, #96]	@ (8002578 <MX_TIM2_Init+0x94>)
 8002516:	4a19      	ldr	r2, [pc, #100]	@ (800257c <MX_TIM2_Init+0x98>)
 8002518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <MX_TIM2_Init+0x94>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002520:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <MX_TIM2_Init+0x94>)
 8002522:	2280      	movs	r2, #128	@ 0x80
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002526:	4814      	ldr	r0, [pc, #80]	@ (8002578 <MX_TIM2_Init+0x94>)
 8002528:	f002 fb1c 	bl	8004b64 <HAL_TIM_Base_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002532:	f000 f953 	bl	80027dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800253a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4619      	mov	r1, r3
 8002542:	480d      	ldr	r0, [pc, #52]	@ (8002578 <MX_TIM2_Init+0x94>)
 8002544:	f002 fcdf 	bl	8004f06 <HAL_TIM_ConfigClockSource>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800254e:	f000 f945 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800255a:	463b      	mov	r3, r7
 800255c:	4619      	mov	r1, r3
 800255e:	4806      	ldr	r0, [pc, #24]	@ (8002578 <MX_TIM2_Init+0x94>)
 8002560:	f002 feea 	bl	8005338 <HAL_TIMEx_MasterConfigSynchronization>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800256a:	f000 f937 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000210 	.word	0x20000210
 800257c:	002ab980 	.word	0x002ab980

08002580 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002594:	463b      	mov	r3, r7
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800259c:	4b1c      	ldr	r3, [pc, #112]	@ (8002610 <MX_TIM5_Init+0x90>)
 800259e:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <MX_TIM5_Init+0x94>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <MX_TIM5_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b19      	ldr	r3, [pc, #100]	@ (8002610 <MX_TIM5_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 84000000;
 80025ae:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <MX_TIM5_Init+0x90>)
 80025b0:	4a19      	ldr	r2, [pc, #100]	@ (8002618 <MX_TIM5_Init+0x98>)
 80025b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b4:	4b16      	ldr	r3, [pc, #88]	@ (8002610 <MX_TIM5_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <MX_TIM5_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025c0:	4813      	ldr	r0, [pc, #76]	@ (8002610 <MX_TIM5_Init+0x90>)
 80025c2:	f002 facf 	bl	8004b64 <HAL_TIM_Base_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 80025cc:	f000 f906 	bl	80027dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	4619      	mov	r1, r3
 80025dc:	480c      	ldr	r0, [pc, #48]	@ (8002610 <MX_TIM5_Init+0x90>)
 80025de:	f002 fc92 	bl	8004f06 <HAL_TIM_ConfigClockSource>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80025e8:	f000 f8f8 	bl	80027dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025f4:	463b      	mov	r3, r7
 80025f6:	4619      	mov	r1, r3
 80025f8:	4805      	ldr	r0, [pc, #20]	@ (8002610 <MX_TIM5_Init+0x90>)
 80025fa:	f002 fe9d 	bl	8005338 <HAL_TIMEx_MasterConfigSynchronization>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 8002604:	f000 f8ea 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002608:	bf00      	nop
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200000a8 	.word	0x200000a8
 8002614:	40000c00 	.word	0x40000c00
 8002618:	0501bd00 	.word	0x0501bd00

0800261c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 8002622:	4a12      	ldr	r2, [pc, #72]	@ (800266c <MX_USART2_UART_Init+0x50>)
 8002624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002652:	4805      	ldr	r0, [pc, #20]	@ (8002668 <MX_USART2_UART_Init+0x4c>)
 8002654:	f002 fef2 	bl	800543c <HAL_UART_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800265e:	f000 f8bd 	bl	80027dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200001c8 	.word	0x200001c8
 800266c:	40004400 	.word	0x40004400

08002670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	@ 0x28
 8002674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	60da      	str	r2, [r3, #12]
 8002684:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b50      	ldr	r3, [pc, #320]	@ (80027cc <MX_GPIO_Init+0x15c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a4f      	ldr	r2, [pc, #316]	@ (80027cc <MX_GPIO_Init+0x15c>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b4d      	ldr	r3, [pc, #308]	@ (80027cc <MX_GPIO_Init+0x15c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b49      	ldr	r3, [pc, #292]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a48      	ldr	r2, [pc, #288]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b46      	ldr	r3, [pc, #280]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b42      	ldr	r3, [pc, #264]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4a41      	ldr	r2, [pc, #260]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ce:	4b3f      	ldr	r3, [pc, #252]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	4b3b      	ldr	r3, [pc, #236]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a3a      	ldr	r2, [pc, #232]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <MX_GPIO_Init+0x15c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2120      	movs	r1, #32
 80026fa:	4835      	ldr	r0, [pc, #212]	@ (80027d0 <MX_GPIO_Init+0x160>)
 80026fc:	f001 fab2 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AUDIO_B1_OUT_Pin|AUDIO_B0_OUT_Pin, GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	2160      	movs	r1, #96	@ 0x60
 8002704:	4833      	ldr	r0, [pc, #204]	@ (80027d4 <MX_GPIO_Init+0x164>)
 8002706:	f001 faad 	bl	8003c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_AO_Pin|LCD_RESET_Pin|AUDIO_B2_OUT_Pin
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 41a7 	mov.w	r1, #21376	@ 0x5380
 8002710:	4831      	ldr	r0, [pc, #196]	@ (80027d8 <MX_GPIO_Init+0x168>)
 8002712:	f001 faa7 	bl	8003c64 <HAL_GPIO_WritePin>
                          |AUDIO_B3_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B1_Pin BUTTON1_IN_Pin */
  GPIO_InitStruct.Pin = B1_Pin|BUTTON1_IN_Pin;
 8002716:	f242 0308 	movw	r3, #8200	@ 0x2008
 800271a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800271c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4829      	ldr	r0, [pc, #164]	@ (80027d4 <MX_GPIO_Init+0x164>)
 800272e:	f001 f8fd 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON0_IN_Pin */
  GPIO_InitStruct.Pin = BUTTON0_IN_Pin;
 8002732:	2304      	movs	r3, #4
 8002734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002736:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800273a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON0_IN_GPIO_Port, &GPIO_InitStruct);
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	4619      	mov	r1, r3
 8002746:	4823      	ldr	r0, [pc, #140]	@ (80027d4 <MX_GPIO_Init+0x164>)
 8002748:	f001 f8f0 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800274c:	2320      	movs	r3, #32
 800274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	481b      	ldr	r0, [pc, #108]	@ (80027d0 <MX_GPIO_Init+0x160>)
 8002764:	f001 f8e2 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pins : AUDIO_B1_OUT_Pin AUDIO_B0_OUT_Pin */
  GPIO_InitStruct.Pin = AUDIO_B1_OUT_Pin|AUDIO_B0_OUT_Pin;
 8002768:	2360      	movs	r3, #96	@ 0x60
 800276a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276c:	2301      	movs	r3, #1
 800276e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	4815      	ldr	r0, [pc, #84]	@ (80027d4 <MX_GPIO_Init+0x164>)
 8002780:	f001 f8d4 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_AO_Pin LCD_RESET_Pin AUDIO_B2_OUT_Pin
                           AUDIO_B3_OUT_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_AO_Pin|LCD_RESET_Pin|AUDIO_B2_OUT_Pin
 8002784:	f44f 43a7 	mov.w	r3, #21376	@ 0x5380
 8002788:	617b      	str	r3, [r7, #20]
                          |AUDIO_B3_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278a:	2301      	movs	r3, #1
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	480e      	ldr	r0, [pc, #56]	@ (80027d8 <MX_GPIO_Init+0x168>)
 800279e:	f001 f8c5 	bl	800392c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2008      	movs	r0, #8
 80027a8:	f001 f889 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80027ac:	2008      	movs	r0, #8
 80027ae:	f001 f8a2 	bl	80038f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	2009      	movs	r0, #9
 80027b8:	f001 f881 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80027bc:	2009      	movs	r0, #9
 80027be:	f001 f89a 	bl	80038f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80027c2:	bf00      	nop
 80027c4:	3728      	adds	r7, #40	@ 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020400 	.word	0x40020400

080027dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e0:	b672      	cpsid	i
}
 80027e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <Error_Handler+0x8>

080027e8 <generate_number>:
 */

#include "random.h"


uint8_t generate_number(){
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
	uint32_t rand = __HAL_TIM_GET_COUNTER(&htim2);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002818 <generate_number+0x30>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	607b      	str	r3, [r7, #4]
	uint8_t number = (uint8_t)(rand % 100);
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4b08      	ldr	r3, [pc, #32]	@ (800281c <generate_number+0x34>)
 80027fa:	fba3 1302 	umull	r1, r3, r3, r2
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2164      	movs	r1, #100	@ 0x64
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	70fb      	strb	r3, [r7, #3]
	return number;
 800280a:	78fb      	ldrb	r3, [r7, #3]
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	20000210 	.word	0x20000210
 800281c:	51eb851f 	.word	0x51eb851f

08002820 <start_slider>:
int16_t prev_pos = 0;
int16_t pos_conv = 0;

uint8_t dir = 1; // direction that player is facing; 0 is left, 1 is right

void start_slider() {
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002824:	4802      	ldr	r0, [pc, #8]	@ (8002830 <start_slider+0x10>)
 8002826:	f002 f9ed 	bl	8004c04 <HAL_TIM_Base_Start_IT>
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000210 	.word	0x20000210
 8002834:	00000000 	.word	0x00000000

08002838 <get_pos>:


int16_t get_pos() {
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
	if(new_adc){
 800283e:	4b3c      	ldr	r3, [pc, #240]	@ (8002930 <get_pos+0xf8>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d064      	beq.n	8002912 <get_pos+0xda>
		float volt = ((float) adc / 4095.0) * 3.3;
 8002848:	4b3a      	ldr	r3, [pc, #232]	@ (8002934 <get_pos+0xfc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002854:	ee17 0a90 	vmov	r0, s15
 8002858:	f7fd fe22 	bl	80004a0 <__aeabi_f2d>
 800285c:	a330      	add	r3, pc, #192	@ (adr r3, 8002920 <get_pos+0xe8>)
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f7fd ff9f 	bl	80007a4 <__aeabi_ddiv>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	a32e      	add	r3, pc, #184	@ (adr r3, 8002928 <get_pos+0xf0>)
 8002870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002874:	f7fd fe6c 	bl	8000550 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f878 	bl	8000974 <__aeabi_d2f>
 8002884:	4603      	mov	r3, r0
 8002886:	60fb      	str	r3, [r7, #12]

		float conv = (volt / 3.3) * 116.0 + 0.5;
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7fd fe09 	bl	80004a0 <__aeabi_f2d>
 800288e:	a326      	add	r3, pc, #152	@ (adr r3, 8002928 <get_pos+0xf0>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fd ff86 	bl	80007a4 <__aeabi_ddiv>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <get_pos+0x100>)
 80028a6:	f7fd fe53 	bl	8000550 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b21      	ldr	r3, [pc, #132]	@ (800293c <get_pos+0x104>)
 80028b8:	f7fd fc94 	bl	80001e4 <__adddf3>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f856 	bl	8000974 <__aeabi_d2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	60bb      	str	r3, [r7, #8]
		int16_t conv_int = (int16_t) conv;
 80028cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80028d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d4:	ee17 3a90 	vmov	r3, s15
 80028d8:	80fb      	strh	r3, [r7, #6]

		int16_t diff = conv_int - pos;
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <get_pos+0x108>)
 80028de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	80bb      	strh	r3, [r7, #4]
		if(diff >= RESOLUTION || diff <= -RESOLUTION){
 80028ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	dc04      	bgt.n	80028fc <get_pos+0xc4>
 80028f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028fa:	da07      	bge.n	800290c <get_pos+0xd4>
			prev_pos = pos;
 80028fc:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <get_pos+0x108>)
 80028fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002902:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <get_pos+0x10c>)
 8002904:	801a      	strh	r2, [r3, #0]
			pos = conv_int;
 8002906:	4a0e      	ldr	r2, [pc, #56]	@ (8002940 <get_pos+0x108>)
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	8013      	strh	r3, [r2, #0]
		}
		new_adc = 0;
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <get_pos+0xf8>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
	}

	return pos;
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <get_pos+0x108>)
 8002914:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	00000000 	.word	0x00000000
 8002924:	40affe00 	.word	0x40affe00
 8002928:	66666666 	.word	0x66666666
 800292c:	400a6666 	.word	0x400a6666
 8002930:	20000258 	.word	0x20000258
 8002934:	2000025c 	.word	0x2000025c
 8002938:	405d0000 	.word	0x405d0000
 800293c:	3fe00000 	.word	0x3fe00000
 8002940:	20000260 	.word	0x20000260
 8002944:	20000262 	.word	0x20000262

08002948 <get_ADC>:

void get_ADC() {
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800294c:	4808      	ldr	r0, [pc, #32]	@ (8002970 <get_ADC+0x28>)
 800294e:	f000 fb71 	bl	8003034 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);  // wait until conversion finishes
 8002952:	210a      	movs	r1, #10
 8002954:	4806      	ldr	r0, [pc, #24]	@ (8002970 <get_ADC+0x28>)
 8002956:	f000 fc21 	bl	800319c <HAL_ADC_PollForConversion>
	adc = HAL_ADC_GetValue(&hadc1);
 800295a:	4805      	ldr	r0, [pc, #20]	@ (8002970 <get_ADC+0x28>)
 800295c:	f000 fca9 	bl	80032b2 <HAL_ADC_GetValue>
 8002960:	4603      	mov	r3, r0
 8002962:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <get_ADC+0x2c>)
 8002964:	6013      	str	r3, [r2, #0]
	new_adc = 1;
 8002966:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <get_ADC+0x30>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
	return;
 800296c:	bf00      	nop
}
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000128 	.word	0x20000128
 8002974:	2000025c 	.word	0x2000025c
 8002978:	20000258 	.word	0x20000258

0800297c <in_motion>:


uint8_t in_motion() {
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
	int16_t diff = pos - prev_pos;
 8002982:	4b0e      	ldr	r3, [pc, #56]	@ (80029bc <in_motion+0x40>)
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <in_motion+0x44>)
 800298c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002990:	b29b      	uxth	r3, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	b29b      	uxth	r3, r3
 8002996:	80fb      	strh	r3, [r7, #6]
	if ( diff > RESOLUTION || diff < -RESOLUTION ) {
 8002998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800299c:	2b02      	cmp	r3, #2
 800299e:	dc04      	bgt.n	80029aa <in_motion+0x2e>
 80029a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a4:	f113 0f02 	cmn.w	r3, #2
 80029a8:	da01      	bge.n	80029ae <in_motion+0x32>
		return 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <in_motion+0x34>
	}

	return 0;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	20000260 	.word	0x20000260
 80029c0:	20000262 	.word	0x20000262

080029c4 <get_dir>:
uint8_t get_dir() {
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0

	if (pos - prev_pos > RESOLUTION ) {
 80029c8:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <get_dir+0x48>)
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <get_dir+0x4c>)
 80029d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	dd03      	ble.n	80029e4 <get_dir+0x20>
		dir = 1;
 80029dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <get_dir+0x50>)
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e00c      	b.n	80029fe <get_dir+0x3a>
	} else if (prev_pos - pos > RESOLUTION) {
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <get_dir+0x4c>)
 80029e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <get_dir+0x48>)
 80029ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	dd02      	ble.n	80029fe <get_dir+0x3a>
		dir = 0;
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <get_dir+0x50>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
	}
	return dir;
 80029fe:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <get_dir+0x50>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	20000260 	.word	0x20000260
 8002a10:	20000262 	.word	0x20000262
 8002a14:	20000028 	.word	0x20000028

08002a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_MspInit+0x4c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	4a0f      	ldr	r2, [pc, #60]	@ (8002a64 <HAL_MspInit+0x4c>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <HAL_MspInit+0x4c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <HAL_MspInit+0x4c>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <HAL_MspInit+0x4c>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4a:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <HAL_MspInit+0x4c>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800

08002a68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	@ 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a24      	ldr	r2, [pc, #144]	@ (8002b18 <HAL_ADC_MspInit+0xb0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d141      	bne.n	8002b0e <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	4a22      	ldr	r2, [pc, #136]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	4a1b      	ldr	r2, [pc, #108]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab6:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	4a14      	ldr	r2, [pc, #80]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad2:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_ADC_MspInit+0xb4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SLIDER_IN_Pin;
 8002ade:	2310      	movs	r3, #16
 8002ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SLIDER_IN_GPIO_Port, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	480b      	ldr	r0, [pc, #44]	@ (8002b20 <HAL_ADC_MspInit+0xb8>)
 8002af2:	f000 ff1b 	bl	800392c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RANDOM_IN_Pin;
 8002af6:	2302      	movs	r3, #2
 8002af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002afa:	2303      	movs	r3, #3
 8002afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RANDOM_IN_GPIO_Port, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	4806      	ldr	r0, [pc, #24]	@ (8002b24 <HAL_ADC_MspInit+0xbc>)
 8002b0a:	f000 ff0f 	bl	800392c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	@ 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020400 	.word	0x40020400

08002b28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <HAL_SPI_MspInit+0x84>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d12c      	bne.n	8002ba4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	4a17      	ldr	r2, [pc, #92]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 8002b82:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b90:	2303      	movs	r3, #3
 8002b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b94:	2305      	movs	r3, #5
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4805      	ldr	r0, [pc, #20]	@ (8002bb4 <HAL_SPI_MspInit+0x8c>)
 8002ba0:	f000 fec4 	bl	800392c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	@ 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40003800 	.word	0x40003800
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020400 	.word	0x40020400

08002bb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c70 <HAL_TIM_Base_MspInit+0xb8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d116      	bne.n	8002bf8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	4b29      	ldr	r3, [pc, #164]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	4a28      	ldr	r2, [pc, #160]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bda:	4b26      	ldr	r3, [pc, #152]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2019      	movs	r0, #25
 8002bec:	f000 fe67 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002bf0:	2019      	movs	r0, #25
 8002bf2:	f000 fe80 	bl	80038f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002bf6:	e036      	b.n	8002c66 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c00:	d116      	bne.n	8002c30 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c12:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2100      	movs	r1, #0
 8002c22:	201c      	movs	r0, #28
 8002c24:	f000 fe4b 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c28:	201c      	movs	r0, #28
 8002c2a:	f000 fe64 	bl	80038f6 <HAL_NVIC_EnableIRQ>
}
 8002c2e:	e01a      	b.n	8002c66 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a10      	ldr	r2, [pc, #64]	@ (8002c78 <HAL_TIM_Base_MspInit+0xc0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d115      	bne.n	8002c66 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	4a0c      	ldr	r2, [pc, #48]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c44:	f043 0308 	orr.w	r3, r3, #8
 8002c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_TIM_Base_MspInit+0xbc>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2032      	movs	r0, #50	@ 0x32
 8002c5c:	f000 fe2f 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c60:	2032      	movs	r0, #50	@ 0x32
 8002c62:	f000 fe48 	bl	80038f6 <HAL_NVIC_EnableIRQ>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40000c00 	.word	0x40000c00

08002c7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a19      	ldr	r2, [pc, #100]	@ (8002d00 <HAL_UART_MspInit+0x84>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d12b      	bne.n	8002cf6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <HAL_UART_MspInit+0x88>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4a17      	ldr	r2, [pc, #92]	@ (8002d04 <HAL_UART_MspInit+0x88>)
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cae:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_UART_MspInit+0x88>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <HAL_UART_MspInit+0x88>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	4a10      	ldr	r2, [pc, #64]	@ (8002d04 <HAL_UART_MspInit+0x88>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cca:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_UART_MspInit+0x88>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <HAL_UART_MspInit+0x8c>)
 8002cf2:	f000 fe1b 	bl	800392c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002cf6:	bf00      	nop
 8002cf8:	3728      	adds	r7, #40	@ 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40004400 	.word	0x40004400
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40020000 	.word	0x40020000

08002d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002d10:	bf00      	nop
 8002d12:	e7fd      	b.n	8002d10 <NMI_Handler+0x4>

08002d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <MemManage_Handler+0x4>

08002d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <BusFault_Handler+0x4>

08002d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <UsageFault_Handler+0x4>

08002d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d62:	f000 f8df 	bl	8002f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	climb_pressed(GPIOC, BUTTON0_IN_Pin);
 8002d70:	2104      	movs	r1, #4
 8002d72:	4804      	ldr	r0, [pc, #16]	@ (8002d84 <EXTI2_IRQHandler+0x18>)
 8002d74:	f7fe faf8 	bl	8001368 <climb_pressed>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON0_IN_Pin);
 8002d78:	2004      	movs	r0, #4
 8002d7a:	f000 ff8d 	bl	8003c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40020800 	.word	0x40020800

08002d88 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	shield_pressed(BUTTON1_IN_Pin);
 8002d8c:	2008      	movs	r0, #8
 8002d8e:	f7fe fafb 	bl	8001388 <shield_pressed>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_IN_Pin);
 8002d92:	2008      	movs	r0, #8
 8002d94:	f000 ff80 	bl	8003c98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	play_audio(current_audio, current_length);
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <TIM1_UP_TIM10_IRQHandler+0x20>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a06      	ldr	r2, [pc, #24]	@ (8002dc0 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fa98 	bl	80012e0 <play_audio>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002db0:	4804      	ldr	r0, [pc, #16]	@ (8002dc4 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8002db2:	f001 ffb8 	bl	8004d26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000009c 	.word	0x2000009c
 8002dc0:	200000a0 	.word	0x200000a0
 8002dc4:	20000054 	.word	0x20000054

08002dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	get_ADC();
 8002dcc:	f7ff fdbc 	bl	8002948 <get_ADC>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dd0:	4802      	ldr	r0, [pc, #8]	@ (8002ddc <TIM2_IRQHandler+0x14>)
 8002dd2:	f001 ffa8 	bl	8004d26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000210 	.word	0x20000210

08002de0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	if (is_shield) {
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <TIM5_IRQHandler+0x20>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <TIM5_IRQHandler+0x12>
		shield_counter();
 8002dec:	f7fe faf6 	bl	80013dc <shield_counter>
 8002df0:	e001      	b.n	8002df6 <TIM5_IRQHandler+0x16>
	} else {
		timeout_counter();
 8002df2:	f7fe fb1d 	bl	8001430 <timeout_counter>
	}
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002df6:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <TIM5_IRQHandler+0x24>)
 8002df8:	f001 ff95 	bl	8004d26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	200000f1 	.word	0x200000f1
 8002e04:	200000a8 	.word	0x200000a8

08002e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <SystemInit+0x20>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	4a05      	ldr	r2, [pc, #20]	@ (8002e28 <SystemInit+0x20>)
 8002e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e30:	f7ff ffea 	bl	8002e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e34:	480c      	ldr	r0, [pc, #48]	@ (8002e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e36:	490d      	ldr	r1, [pc, #52]	@ (8002e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e38:	4a0d      	ldr	r2, [pc, #52]	@ (8002e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e3c:	e002      	b.n	8002e44 <LoopCopyDataInit>

08002e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e42:	3304      	adds	r3, #4

08002e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e48:	d3f9      	bcc.n	8002e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e50:	e001      	b.n	8002e56 <LoopFillZerobss>

08002e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e54:	3204      	adds	r2, #4

08002e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e58:	d3fb      	bcc.n	8002e52 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002e5a:	f002 fdbb 	bl	80059d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5e:	f7ff f9e5 	bl	800222c <main>
  bx  lr    
 8002e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e6c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8002e70:	0801db64 	.word	0x0801db64
  ldr r2, =_sbss
 8002e74:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002e78:	20000268 	.word	0x20000268

08002e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e7c:	e7fe      	b.n	8002e7c <ADC_IRQHandler>
	...

08002e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e84:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <HAL_Init+0x40>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec0 <HAL_Init+0x40>)
 8002e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_Init+0x40>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <HAL_Init+0x40>)
 8002e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <HAL_Init+0x40>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <HAL_Init+0x40>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea8:	2003      	movs	r0, #3
 8002eaa:	f000 fcfd 	bl	80038a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f000 f808 	bl	8002ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb4:	f7ff fdb0 	bl	8002a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ecc:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <HAL_InitTick+0x54>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <HAL_InitTick+0x58>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fd15 	bl	8003912 <HAL_SYSTICK_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00e      	b.n	8002f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b0f      	cmp	r3, #15
 8002ef6:	d80a      	bhi.n	8002f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f00:	f000 fcdd 	bl	80038be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f04:	4a06      	ldr	r2, [pc, #24]	@ (8002f20 <HAL_InitTick+0x5c>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	2000002c 	.word	0x2000002c
 8002f1c:	20000034 	.word	0x20000034
 8002f20:	20000030 	.word	0x20000030

08002f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f28:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_IncTick+0x20>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_IncTick+0x24>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <HAL_IncTick+0x24>)
 8002f36:	6013      	str	r3, [r2, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000034 	.word	0x20000034
 8002f48:	20000264 	.word	0x20000264

08002f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <HAL_GetTick+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000264 	.word	0x20000264

08002f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f6c:	f7ff ffee 	bl	8002f4c <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f7c:	d005      	beq.n	8002f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <HAL_Delay+0x44>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f8a:	bf00      	nop
 8002f8c:	f7ff ffde 	bl	8002f4c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d8f7      	bhi.n	8002f8c <HAL_Delay+0x28>
  {
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000034 	.word	0x20000034

08002fac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e033      	b.n	800302a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff fd4c 	bl	8002a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d118      	bne.n	800301c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ff2:	f023 0302 	bic.w	r3, r3, #2
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa86 	bl	8003510 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	@ 0x40
 800301a:	e001      	b.n	8003020 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003028:	7bfb      	ldrb	r3, [r7, #15]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_ADC_Start+0x1a>
 800304a:	2302      	movs	r3, #2
 800304c:	e097      	b.n	800317e <HAL_ADC_Start+0x14a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d018      	beq.n	8003096 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003074:	4b45      	ldr	r3, [pc, #276]	@ (800318c <HAL_ADC_Start+0x158>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a45      	ldr	r2, [pc, #276]	@ (8003190 <HAL_ADC_Start+0x15c>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9a      	lsrs	r2, r3, #18
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003088:	e002      	b.n	8003090 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	3b01      	subs	r3, #1
 800308e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f9      	bne.n	800308a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d15f      	bne.n	8003164 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e2:	d106      	bne.n	80030f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e8:	f023 0206 	bic.w	r2, r3, #6
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	645a      	str	r2, [r3, #68]	@ 0x44
 80030f0:	e002      	b.n	80030f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003100:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_ADC_Start+0x160>)
 8003102:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800310c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d129      	bne.n	800317c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	e020      	b.n	800317c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a16      	ldr	r2, [pc, #88]	@ (8003198 <HAL_ADC_Start+0x164>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d11b      	bne.n	800317c <HAL_ADC_Start+0x148>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d114      	bne.n	800317c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	e00b      	b.n	800317c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	f043 0210 	orr.w	r2, r3, #16
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003174:	f043 0201 	orr.w	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2000002c 	.word	0x2000002c
 8003190:	431bde83 	.word	0x431bde83
 8003194:	40012300 	.word	0x40012300
 8003198:	40012000 	.word	0x40012000

0800319c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b8:	d113      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c8:	d10b      	bne.n	80031e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e063      	b.n	80032aa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e2:	f7ff feb3 	bl	8002f4c <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031e8:	e021      	b.n	800322e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031f0:	d01d      	beq.n	800322e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_ADC_PollForConversion+0x6c>
 80031f8:	f7ff fea8 	bl	8002f4c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d212      	bcs.n	800322e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d00b      	beq.n	800322e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	f043 0204 	orr.w	r2, r3, #4
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e03d      	b.n	80032aa <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b02      	cmp	r3, #2
 800323a:	d1d6      	bne.n	80031ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0212 	mvn.w	r2, #18
 8003244:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d123      	bne.n	80032a8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11f      	bne.n	80032a8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003272:	2b00      	cmp	r3, #0
 8003274:	d006      	beq.n	8003284 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003280:	2b00      	cmp	r3, #0
 8003282:	d111      	bne.n	80032a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1c>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e105      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x228>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b09      	cmp	r3, #9
 80032f6:	d925      	bls.n	8003344 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68d9      	ldr	r1, [r3, #12]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	3b1e      	subs	r3, #30
 800330e:	2207      	movs	r2, #7
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43da      	mvns	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	400a      	ands	r2, r1
 800331c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68d9      	ldr	r1, [r3, #12]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	4618      	mov	r0, r3
 8003330:	4603      	mov	r3, r0
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4403      	add	r3, r0
 8003336:	3b1e      	subs	r3, #30
 8003338:	409a      	lsls	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	e022      	b.n	800338a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6919      	ldr	r1, [r3, #16]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	2207      	movs	r2, #7
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	400a      	ands	r2, r1
 8003366:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6919      	ldr	r1, [r3, #16]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	4618      	mov	r0, r3
 800337a:	4603      	mov	r3, r0
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4403      	add	r3, r0
 8003380:	409a      	lsls	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b06      	cmp	r3, #6
 8003390:	d824      	bhi.n	80033dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	3b05      	subs	r3, #5
 80033a4:	221f      	movs	r2, #31
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	400a      	ands	r2, r1
 80033b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	4618      	mov	r0, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	3b05      	subs	r3, #5
 80033ce:	fa00 f203 	lsl.w	r2, r0, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033da:	e04c      	b.n	8003476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d824      	bhi.n	800342e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b23      	subs	r3, #35	@ 0x23
 80033f6:	221f      	movs	r2, #31
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43da      	mvns	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	400a      	ands	r2, r1
 8003404:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	4618      	mov	r0, r3
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	3b23      	subs	r3, #35	@ 0x23
 8003420:	fa00 f203 	lsl.w	r2, r0, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
 800342c:	e023      	b.n	8003476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	3b41      	subs	r3, #65	@ 0x41
 8003440:	221f      	movs	r2, #31
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	400a      	ands	r2, r1
 800344e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	4618      	mov	r0, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	3b41      	subs	r3, #65	@ 0x41
 800346a:	fa00 f203 	lsl.w	r2, r0, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003476:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <HAL_ADC_ConfigChannel+0x234>)
 8003478:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a21      	ldr	r2, [pc, #132]	@ (8003504 <HAL_ADC_ConfigChannel+0x238>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d109      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x1cc>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b12      	cmp	r3, #18
 800348a:	d105      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	@ (8003504 <HAL_ADC_ConfigChannel+0x238>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d123      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x21e>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d003      	beq.n	80034b2 <HAL_ADC_ConfigChannel+0x1e6>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b11      	cmp	r3, #17
 80034b0:	d11b      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d111      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034c6:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <HAL_ADC_ConfigChannel+0x23c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a10      	ldr	r2, [pc, #64]	@ (800350c <HAL_ADC_ConfigChannel+0x240>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	0c9a      	lsrs	r2, r3, #18
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034dc:	e002      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f9      	bne.n	80034de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40012300 	.word	0x40012300
 8003504:	40012000 	.word	0x40012000
 8003508:	2000002c 	.word	0x2000002c
 800350c:	431bde83 	.word	0x431bde83

08003510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003518:	4b79      	ldr	r3, [pc, #484]	@ (8003700 <ADC_Init+0x1f0>)
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	021a      	lsls	r2, r3, #8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6899      	ldr	r1, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	4a58      	ldr	r2, [pc, #352]	@ (8003704 <ADC_Init+0x1f4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	e00f      	b.n	800360e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800360c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0202 	bic.w	r2, r2, #2
 800361c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7e1b      	ldrb	r3, [r3, #24]
 8003628:	005a      	lsls	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800364a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800365a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	3b01      	subs	r3, #1
 8003668:	035a      	lsls	r2, r3, #13
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e007      	b.n	8003684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	3b01      	subs	r3, #1
 80036a0:	051a      	lsls	r2, r3, #20
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036c6:	025a      	lsls	r2, r3, #9
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6899      	ldr	r1, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	029a      	lsls	r2, r3, #10
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012300 	.word	0x40012300
 8003704:	0f000001 	.word	0x0f000001

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	@ (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	@ (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	@ (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	@ (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	@ 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003874:	d301      	bcc.n	800387a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003876:	2301      	movs	r3, #1
 8003878:	e00f      	b.n	800389a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800387a:	4a0a      	ldr	r2, [pc, #40]	@ (80038a4 <SysTick_Config+0x40>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003882:	210f      	movs	r1, #15
 8003884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003888:	f7ff ff8e 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <SysTick_Config+0x40>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003892:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <SysTick_Config+0x40>)
 8003894:	2207      	movs	r2, #7
 8003896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000e010 	.word	0xe000e010

080038a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff29 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d0:	f7ff ff3e 	bl	8003750 <__NVIC_GetPriorityGrouping>
 80038d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	6978      	ldr	r0, [r7, #20]
 80038dc:	f7ff ff8e 	bl	80037fc <NVIC_EncodePriority>
 80038e0:	4602      	mov	r2, r0
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff5d 	bl	80037a8 <__NVIC_SetPriority>
}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff31 	bl	800376c <__NVIC_EnableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ffa2 	bl	8003864 <SysTick_Config>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	@ 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	e159      	b.n	8003bfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003948:	2201      	movs	r2, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	429a      	cmp	r2, r3
 8003962:	f040 8148 	bne.w	8003bf6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d005      	beq.n	800397e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800397a:	2b02      	cmp	r3, #2
 800397c:	d130      	bne.n	80039e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	2203      	movs	r2, #3
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43db      	mvns	r3, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039b4:	2201      	movs	r2, #1
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 0201 	and.w	r2, r3, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d017      	beq.n	8003a1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	2203      	movs	r2, #3
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d123      	bne.n	8003a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	08da      	lsrs	r2, r3, #3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3208      	adds	r2, #8
 8003a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0203 	and.w	r2, r3, #3
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a2 	beq.w	8003bf6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	4b57      	ldr	r3, [pc, #348]	@ (8003c14 <HAL_GPIO_Init+0x2e8>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	4a56      	ldr	r2, [pc, #344]	@ (8003c14 <HAL_GPIO_Init+0x2e8>)
 8003abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac2:	4b54      	ldr	r3, [pc, #336]	@ (8003c14 <HAL_GPIO_Init+0x2e8>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ace:	4a52      	ldr	r2, [pc, #328]	@ (8003c18 <HAL_GPIO_Init+0x2ec>)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	220f      	movs	r2, #15
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a49      	ldr	r2, [pc, #292]	@ (8003c1c <HAL_GPIO_Init+0x2f0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d019      	beq.n	8003b2e <HAL_GPIO_Init+0x202>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a48      	ldr	r2, [pc, #288]	@ (8003c20 <HAL_GPIO_Init+0x2f4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_GPIO_Init+0x1fe>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a47      	ldr	r2, [pc, #284]	@ (8003c24 <HAL_GPIO_Init+0x2f8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00d      	beq.n	8003b26 <HAL_GPIO_Init+0x1fa>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a46      	ldr	r2, [pc, #280]	@ (8003c28 <HAL_GPIO_Init+0x2fc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <HAL_GPIO_Init+0x1f6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a45      	ldr	r2, [pc, #276]	@ (8003c2c <HAL_GPIO_Init+0x300>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_GPIO_Init+0x1f2>
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	e008      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b1e:	2307      	movs	r3, #7
 8003b20:	e006      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b22:	2303      	movs	r3, #3
 8003b24:	e004      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e002      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <HAL_GPIO_Init+0x204>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	f002 0203 	and.w	r2, r2, #3
 8003b36:	0092      	lsls	r2, r2, #2
 8003b38:	4093      	lsls	r3, r2
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b40:	4935      	ldr	r1, [pc, #212]	@ (8003c18 <HAL_GPIO_Init+0x2ec>)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	3302      	adds	r3, #2
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b4e:	4b38      	ldr	r3, [pc, #224]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b72:	4a2f      	ldr	r2, [pc, #188]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b78:	4b2d      	ldr	r3, [pc, #180]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b9c:	4a24      	ldr	r2, [pc, #144]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ba2:	4b23      	ldr	r3, [pc, #140]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bcc:	4b18      	ldr	r3, [pc, #96]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	f67f aea2 	bls.w	8003948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3724      	adds	r7, #36	@ 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	40020400 	.word	0x40020400
 8003c24:	40020800 	.word	0x40020800
 8003c28:	40020c00 	.word	0x40020c00
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40013c00 	.word	0x40013c00

08003c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e001      	b.n	8003c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	807b      	strh	r3, [r7, #2]
 8003c70:	4613      	mov	r3, r2
 8003c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c74:	787b      	ldrb	r3, [r7, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c80:	e003      	b.n	8003c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c82:	887b      	ldrh	r3, [r7, #2]
 8003c84:	041a      	lsls	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	619a      	str	r2, [r3, #24]
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ca2:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cae:	4a05      	ldr	r2, [pc, #20]	@ (8003cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f806 	bl	8003cc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40013c00 	.word	0x40013c00

08003cc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e267      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d075      	beq.n	8003dea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cfe:	4b88      	ldr	r3, [pc, #544]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d00c      	beq.n	8003d24 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0a:	4b85      	ldr	r3, [pc, #532]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d112      	bne.n	8003d3c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d16:	4b82      	ldr	r3, [pc, #520]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d22:	d10b      	bne.n	8003d3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d24:	4b7e      	ldr	r3, [pc, #504]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d05b      	beq.n	8003de8 <HAL_RCC_OscConfig+0x108>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d157      	bne.n	8003de8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e242      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d44:	d106      	bne.n	8003d54 <HAL_RCC_OscConfig+0x74>
 8003d46:	4b76      	ldr	r3, [pc, #472]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a75      	ldr	r2, [pc, #468]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	e01d      	b.n	8003d90 <HAL_RCC_OscConfig+0xb0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x98>
 8003d5e:	4b70      	ldr	r3, [pc, #448]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6f      	ldr	r2, [pc, #444]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e00b      	b.n	8003d90 <HAL_RCC_OscConfig+0xb0>
 8003d78:	4b69      	ldr	r3, [pc, #420]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a68      	ldr	r2, [pc, #416]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b66      	ldr	r3, [pc, #408]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a65      	ldr	r2, [pc, #404]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d013      	beq.n	8003dc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7ff f8d8 	bl	8002f4c <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da0:	f7ff f8d4 	bl	8002f4c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	@ 0x64
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e207      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0xc0>
 8003dbe:	e014      	b.n	8003dea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7ff f8c4 	bl	8002f4c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7ff f8c0 	bl	8002f4c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	@ 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e1f3      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	4b51      	ldr	r3, [pc, #324]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xe8>
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d063      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003df6:	4b4a      	ldr	r3, [pc, #296]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e02:	4b47      	ldr	r3, [pc, #284]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d11c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0e:	4b44      	ldr	r3, [pc, #272]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d116      	bne.n	8003e48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	4b41      	ldr	r3, [pc, #260]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_RCC_OscConfig+0x152>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e1c7      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e32:	4b3b      	ldr	r3, [pc, #236]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4937      	ldr	r1, [pc, #220]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	e03a      	b.n	8003ebe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d020      	beq.n	8003e92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e50:	4b34      	ldr	r3, [pc, #208]	@ (8003f24 <HAL_RCC_OscConfig+0x244>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7ff f879 	bl	8002f4c <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5e:	f7ff f875 	bl	8002f4c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e1a8      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e70:	4b2b      	ldr	r3, [pc, #172]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7c:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4925      	ldr	r1, [pc, #148]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]
 8003e90:	e015      	b.n	8003ebe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e92:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <HAL_RCC_OscConfig+0x244>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e98:	f7ff f858 	bl	8002f4c <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea0:	f7ff f854 	bl	8002f4c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e187      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d036      	beq.n	8003f38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d016      	beq.n	8003f00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed2:	4b15      	ldr	r3, [pc, #84]	@ (8003f28 <HAL_RCC_OscConfig+0x248>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed8:	f7ff f838 	bl	8002f4c <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee0:	f7ff f834 	bl	8002f4c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e167      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x200>
 8003efe:	e01b      	b.n	8003f38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <HAL_RCC_OscConfig+0x248>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7ff f821 	bl	8002f4c <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0c:	e00e      	b.n	8003f2c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0e:	f7ff f81d 	bl	8002f4c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d907      	bls.n	8003f2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e150      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
 8003f20:	40023800 	.word	0x40023800
 8003f24:	42470000 	.word	0x42470000
 8003f28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	4b88      	ldr	r3, [pc, #544]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1ea      	bne.n	8003f0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8097 	beq.w	8004074 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4a:	4b81      	ldr	r3, [pc, #516]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10f      	bne.n	8003f76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	4b7d      	ldr	r3, [pc, #500]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	4a7c      	ldr	r2, [pc, #496]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f66:	4b7a      	ldr	r3, [pc, #488]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f72:	2301      	movs	r3, #1
 8003f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f76:	4b77      	ldr	r3, [pc, #476]	@ (8004154 <HAL_RCC_OscConfig+0x474>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d118      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f82:	4b74      	ldr	r3, [pc, #464]	@ (8004154 <HAL_RCC_OscConfig+0x474>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a73      	ldr	r2, [pc, #460]	@ (8004154 <HAL_RCC_OscConfig+0x474>)
 8003f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8e:	f7fe ffdd 	bl	8002f4c <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f96:	f7fe ffd9 	bl	8002f4c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e10c      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8004154 <HAL_RCC_OscConfig+0x474>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0x2ea>
 8003fbc:	4b64      	ldr	r3, [pc, #400]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc0:	4a63      	ldr	r2, [pc, #396]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc8:	e01c      	b.n	8004004 <HAL_RCC_OscConfig+0x324>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b05      	cmp	r3, #5
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x30c>
 8003fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	f043 0304 	orr.w	r3, r3, #4
 8003fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fde:	4b5c      	ldr	r3, [pc, #368]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0x324>
 8003fec:	4b58      	ldr	r3, [pc, #352]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	4a57      	ldr	r2, [pc, #348]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff8:	4b55      	ldr	r3, [pc, #340]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffc:	4a54      	ldr	r2, [pc, #336]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	f023 0304 	bic.w	r3, r3, #4
 8004002:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fe ff9e 	bl	8002f4c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004012:	e00a      	b.n	800402a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fe ff9a 	bl	8002f4c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0cb      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402a:	4b49      	ldr	r3, [pc, #292]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ee      	beq.n	8004014 <HAL_RCC_OscConfig+0x334>
 8004036:	e014      	b.n	8004062 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004038:	f7fe ff88 	bl	8002f4c <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fe ff84 	bl	8002f4c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0b5      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004056:	4b3e      	ldr	r3, [pc, #248]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ee      	bne.n	8004040 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004062:	7dfb      	ldrb	r3, [r7, #23]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d105      	bne.n	8004074 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004068:	4b39      	ldr	r3, [pc, #228]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	4a38      	ldr	r2, [pc, #224]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 800406e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004072:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80a1 	beq.w	80041c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800407e:	4b34      	ldr	r3, [pc, #208]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b08      	cmp	r3, #8
 8004088:	d05c      	beq.n	8004144 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d141      	bne.n	8004116 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004092:	4b31      	ldr	r3, [pc, #196]	@ (8004158 <HAL_RCC_OscConfig+0x478>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fe ff58 	bl	8002f4c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fe ff54 	bl	8002f4c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e087      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e0:	061b      	lsls	r3, r3, #24
 80040e2:	491b      	ldr	r1, [pc, #108]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <HAL_RCC_OscConfig+0x478>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fe ff2d 	bl	8002f4c <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f6:	f7fe ff29 	bl	8002f4c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e05c      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004108:	4b11      	ldr	r3, [pc, #68]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x416>
 8004114:	e054      	b.n	80041c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004116:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <HAL_RCC_OscConfig+0x478>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fe ff16 	bl	8002f4c <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fe ff12 	bl	8002f4c <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e045      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_RCC_OscConfig+0x470>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x444>
 8004142:	e03d      	b.n	80041c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e038      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
 8004150:	40023800 	.word	0x40023800
 8004154:	40007000 	.word	0x40007000
 8004158:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800415c:	4b1b      	ldr	r3, [pc, #108]	@ (80041cc <HAL_RCC_OscConfig+0x4ec>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d028      	beq.n	80041bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d121      	bne.n	80041bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d11a      	bne.n	80041bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004192:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004194:	4293      	cmp	r3, r2
 8004196:	d111      	bne.n	80041bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	085b      	lsrs	r3, r3, #1
 80041a4:	3b01      	subs	r3, #1
 80041a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800

080041d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0cc      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b68      	ldr	r3, [pc, #416]	@ (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d90c      	bls.n	800420c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b65      	ldr	r3, [pc, #404]	@ (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b63      	ldr	r3, [pc, #396]	@ (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0b8      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d020      	beq.n	800425a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004224:	4b59      	ldr	r3, [pc, #356]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4a58      	ldr	r2, [pc, #352]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800422e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800423c:	4b53      	ldr	r3, [pc, #332]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a52      	ldr	r2, [pc, #328]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004248:	4b50      	ldr	r3, [pc, #320]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	494d      	ldr	r1, [pc, #308]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	4313      	orrs	r3, r2
 8004258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d044      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b47      	ldr	r3, [pc, #284]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d119      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e07f      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d003      	beq.n	800428e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428a:	2b03      	cmp	r3, #3
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428e:	4b3f      	ldr	r3, [pc, #252]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e06f      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429e:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e067      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b37      	ldr	r3, [pc, #220]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4934      	ldr	r1, [pc, #208]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c0:	f7fe fe44 	bl	8002f4c <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fe fe40 	bl	8002f4c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e04f      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b2b      	ldr	r3, [pc, #172]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f0:	4b25      	ldr	r3, [pc, #148]	@ (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d20c      	bcs.n	8004318 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b22      	ldr	r3, [pc, #136]	@ (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b20      	ldr	r3, [pc, #128]	@ (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e032      	b.n	800437e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004324:	4b19      	ldr	r3, [pc, #100]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4916      	ldr	r1, [pc, #88]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004342:	4b12      	ldr	r3, [pc, #72]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	490e      	ldr	r1, [pc, #56]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004356:	f000 f821 	bl	800439c <HAL_RCC_GetSysClockFreq>
 800435a:	4602      	mov	r2, r0
 800435c:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	490a      	ldr	r1, [pc, #40]	@ (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	5ccb      	ldrb	r3, [r1, r3]
 800436a:	fa22 f303 	lsr.w	r3, r2, r3
 800436e:	4a09      	ldr	r2, [pc, #36]	@ (8004394 <HAL_RCC_ClockConfig+0x1c4>)
 8004370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004372:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <HAL_RCC_ClockConfig+0x1c8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fda4 	bl	8002ec4 <HAL_InitTick>

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023c00 	.word	0x40023c00
 800438c:	40023800 	.word	0x40023800
 8004390:	0801db3c 	.word	0x0801db3c
 8004394:	2000002c 	.word	0x2000002c
 8004398:	20000030 	.word	0x20000030

0800439c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800439c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a0:	b094      	sub	sp, #80	@ 0x50
 80043a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b4:	4b79      	ldr	r3, [pc, #484]	@ (800459c <HAL_RCC_GetSysClockFreq+0x200>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d00d      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x40>
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	f200 80e1 	bhi.w	8004588 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x34>
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d003      	beq.n	80043d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ce:	e0db      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043d0:	4b73      	ldr	r3, [pc, #460]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043d4:	e0db      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d6:	4b73      	ldr	r3, [pc, #460]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80043d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043da:	e0d8      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043dc:	4b6f      	ldr	r3, [pc, #444]	@ (800459c <HAL_RCC_GetSysClockFreq+0x200>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e6:	4b6d      	ldr	r3, [pc, #436]	@ (800459c <HAL_RCC_GetSysClockFreq+0x200>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d063      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f2:	4b6a      	ldr	r3, [pc, #424]	@ (800459c <HAL_RCC_GetSysClockFreq+0x200>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	099b      	lsrs	r3, r3, #6
 80043f8:	2200      	movs	r2, #0
 80043fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004404:	633b      	str	r3, [r7, #48]	@ 0x30
 8004406:	2300      	movs	r3, #0
 8004408:	637b      	str	r3, [r7, #52]	@ 0x34
 800440a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800440e:	4622      	mov	r2, r4
 8004410:	462b      	mov	r3, r5
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	0159      	lsls	r1, r3, #5
 800441c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004420:	0150      	lsls	r0, r2, #5
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4621      	mov	r1, r4
 8004428:	1a51      	subs	r1, r2, r1
 800442a:	6139      	str	r1, [r7, #16]
 800442c:	4629      	mov	r1, r5
 800442e:	eb63 0301 	sbc.w	r3, r3, r1
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004440:	4659      	mov	r1, fp
 8004442:	018b      	lsls	r3, r1, #6
 8004444:	4651      	mov	r1, sl
 8004446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800444a:	4651      	mov	r1, sl
 800444c:	018a      	lsls	r2, r1, #6
 800444e:	4651      	mov	r1, sl
 8004450:	ebb2 0801 	subs.w	r8, r2, r1
 8004454:	4659      	mov	r1, fp
 8004456:	eb63 0901 	sbc.w	r9, r3, r1
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800446a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800446e:	4690      	mov	r8, r2
 8004470:	4699      	mov	r9, r3
 8004472:	4623      	mov	r3, r4
 8004474:	eb18 0303 	adds.w	r3, r8, r3
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	462b      	mov	r3, r5
 800447c:	eb49 0303 	adc.w	r3, r9, r3
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800448e:	4629      	mov	r1, r5
 8004490:	024b      	lsls	r3, r1, #9
 8004492:	4621      	mov	r1, r4
 8004494:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004498:	4621      	mov	r1, r4
 800449a:	024a      	lsls	r2, r1, #9
 800449c:	4610      	mov	r0, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a2:	2200      	movs	r2, #0
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044ac:	f7fc fab2 	bl	8000a14 <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4613      	mov	r3, r2
 80044b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b8:	e058      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ba:	4b38      	ldr	r3, [pc, #224]	@ (800459c <HAL_RCC_GetSysClockFreq+0x200>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	099b      	lsrs	r3, r3, #6
 80044c0:	2200      	movs	r2, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	4611      	mov	r1, r2
 80044c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044ca:	623b      	str	r3, [r7, #32]
 80044cc:	2300      	movs	r3, #0
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044d4:	4642      	mov	r2, r8
 80044d6:	464b      	mov	r3, r9
 80044d8:	f04f 0000 	mov.w	r0, #0
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	0159      	lsls	r1, r3, #5
 80044e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e6:	0150      	lsls	r0, r2, #5
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4641      	mov	r1, r8
 80044ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80044f2:	4649      	mov	r1, r9
 80044f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004504:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004508:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800450c:	ebb2 040a 	subs.w	r4, r2, sl
 8004510:	eb63 050b 	sbc.w	r5, r3, fp
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	00eb      	lsls	r3, r5, #3
 800451e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004522:	00e2      	lsls	r2, r4, #3
 8004524:	4614      	mov	r4, r2
 8004526:	461d      	mov	r5, r3
 8004528:	4643      	mov	r3, r8
 800452a:	18e3      	adds	r3, r4, r3
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	464b      	mov	r3, r9
 8004530:	eb45 0303 	adc.w	r3, r5, r3
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004542:	4629      	mov	r1, r5
 8004544:	028b      	lsls	r3, r1, #10
 8004546:	4621      	mov	r1, r4
 8004548:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800454c:	4621      	mov	r1, r4
 800454e:	028a      	lsls	r2, r1, #10
 8004550:	4610      	mov	r0, r2
 8004552:	4619      	mov	r1, r3
 8004554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004556:	2200      	movs	r2, #0
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	61fa      	str	r2, [r7, #28]
 800455c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004560:	f7fc fa58 	bl	8000a14 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4613      	mov	r3, r2
 800456a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800456c:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <HAL_RCC_GetSysClockFreq+0x200>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	3301      	adds	r3, #1
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800457c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800457e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004586:	e002      	b.n	800458e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800458a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800458c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004590:	4618      	mov	r0, r3
 8004592:	3750      	adds	r7, #80	@ 0x50
 8004594:	46bd      	mov	sp, r7
 8004596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800
 80045a0:	00f42400 	.word	0x00f42400
 80045a4:	007a1200 	.word	0x007a1200

080045a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045ac:	4b03      	ldr	r3, [pc, #12]	@ (80045bc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ae:	681b      	ldr	r3, [r3, #0]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	2000002c 	.word	0x2000002c

080045c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045c4:	f7ff fff0 	bl	80045a8 <HAL_RCC_GetHCLKFreq>
 80045c8:	4602      	mov	r2, r0
 80045ca:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	0a9b      	lsrs	r3, r3, #10
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	4903      	ldr	r1, [pc, #12]	@ (80045e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d6:	5ccb      	ldrb	r3, [r1, r3]
 80045d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045dc:	4618      	mov	r0, r3
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40023800 	.word	0x40023800
 80045e4:	0801db4c 	.word	0x0801db4c

080045e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045ec:	f7ff ffdc 	bl	80045a8 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0b5b      	lsrs	r3, r3, #13
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4903      	ldr	r1, [pc, #12]	@ (800460c <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	0801db4c 	.word	0x0801db4c

08004610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07b      	b.n	800471a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004632:	d009      	beq.n	8004648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	61da      	str	r2, [r3, #28]
 800463a:	e005      	b.n	8004648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fe fa60 	bl	8002b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800467e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046cc:	ea42 0103 	orr.w	r1, r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	f003 0104 	and.w	r1, r3, #4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	f003 0210 	and.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004708:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b088      	sub	sp, #32
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004732:	f7fe fc0b 	bl	8002f4c <HAL_GetTick>
 8004736:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
 800474a:	e12a      	b.n	80049a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SPI_Transmit+0x36>
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e122      	b.n	80049a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_SPI_Transmit+0x48>
 8004766:	2302      	movs	r3, #2
 8004768:	e11b      	b.n	80049a2 <HAL_SPI_Transmit+0x280>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2203      	movs	r2, #3
 8004776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	88fa      	ldrh	r2, [r7, #6]
 800478a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047b8:	d10f      	bne.n	80047da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e4:	2b40      	cmp	r3, #64	@ 0x40
 80047e6:	d007      	beq.n	80047f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004800:	d152      	bne.n	80048a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_SPI_Transmit+0xee>
 800480a:	8b7b      	ldrh	r3, [r7, #26]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d145      	bne.n	800489c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	881a      	ldrh	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	1c9a      	adds	r2, r3, #2
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004834:	e032      	b.n	800489c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d112      	bne.n	800486a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	881a      	ldrh	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	1c9a      	adds	r2, r3, #2
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004868:	e018      	b.n	800489c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800486a:	f7fe fb6f 	bl	8002f4c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d803      	bhi.n	8004882 <HAL_SPI_Transmit+0x160>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004880:	d102      	bne.n	8004888 <HAL_SPI_Transmit+0x166>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d109      	bne.n	800489c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e082      	b.n	80049a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1c7      	bne.n	8004836 <HAL_SPI_Transmit+0x114>
 80048a6:	e053      	b.n	8004950 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <HAL_SPI_Transmit+0x194>
 80048b0:	8b7b      	ldrh	r3, [r7, #26]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d147      	bne.n	8004946 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048dc:	e033      	b.n	8004946 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d113      	bne.n	8004914 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	330c      	adds	r3, #12
 80048f6:	7812      	ldrb	r2, [r2, #0]
 80048f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004912:	e018      	b.n	8004946 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004914:	f7fe fb1a 	bl	8002f4c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d803      	bhi.n	800492c <HAL_SPI_Transmit+0x20a>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800492a:	d102      	bne.n	8004932 <HAL_SPI_Transmit+0x210>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e02d      	b.n	80049a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1c6      	bne.n	80048de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f8b1 	bl	8004abc <SPI_EndRxTxTransaction>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049bc:	f7fe fac6 	bl	8002f4c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	4413      	add	r3, r2
 80049ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049cc:	f7fe fabe 	bl	8002f4c <HAL_GetTick>
 80049d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049d2:	4b39      	ldr	r3, [pc, #228]	@ (8004ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	015b      	lsls	r3, r3, #5
 80049d8:	0d1b      	lsrs	r3, r3, #20
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049e2:	e055      	b.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ea:	d051      	beq.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049ec:	f7fe faae 	bl	8002f4c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d902      	bls.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d13d      	bne.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1a:	d111      	bne.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a24:	d004      	beq.n	8004a30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2e:	d107      	bne.n	8004a40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a48:	d10f      	bne.n	8004a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e018      	b.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d102      	bne.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e002      	b.n	8004a90 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d19a      	bne.n	80049e4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3720      	adds	r7, #32
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	2000002c 	.word	0x2000002c

08004abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7ff ff6a 	bl	80049ac <SPI_WaitFlagStateUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e032      	b.n	8004b54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004aee:	4b1b      	ldr	r3, [pc, #108]	@ (8004b5c <SPI_EndRxTxTransaction+0xa0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b60 <SPI_EndRxTxTransaction+0xa4>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	0d5b      	lsrs	r3, r3, #21
 8004afa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b0c:	d112      	bne.n	8004b34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7ff ff47 	bl	80049ac <SPI_WaitFlagStateUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d016      	beq.n	8004b52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b28:	f043 0220 	orr.w	r2, r3, #32
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e00f      	b.n	8004b54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4a:	2b80      	cmp	r3, #128	@ 0x80
 8004b4c:	d0f2      	beq.n	8004b34 <SPI_EndRxTxTransaction+0x78>
 8004b4e:	e000      	b.n	8004b52 <SPI_EndRxTxTransaction+0x96>
        break;
 8004b50:	bf00      	nop
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	2000002c 	.word	0x2000002c
 8004b60:	165e9f81 	.word	0x165e9f81

08004b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e041      	b.n	8004bfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d106      	bne.n	8004b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fe f814 	bl	8002bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f000 faa8 	bl	80050f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d001      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e044      	b.n	8004ca6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1e      	ldr	r2, [pc, #120]	@ (8004cb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x6c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c46:	d013      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x6c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x6c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a19      	ldr	r2, [pc, #100]	@ (8004cbc <HAL_TIM_Base_Start_IT+0xb8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x6c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a17      	ldr	r2, [pc, #92]	@ (8004cc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIM_Base_Start_IT+0x6c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a16      	ldr	r2, [pc, #88]	@ (8004cc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d111      	bne.n	8004c94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d010      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c92:	e007      	b.n	8004ca4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40000c00 	.word	0x40000c00
 8004cc4:	40014000 	.word	0x40014000

08004cc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <HAL_TIM_Base_Stop_IT+0x48>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
 8004cf6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_Base_Stop_IT+0x48>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d020      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01b      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0202 	mvn.w	r2, #2
 8004d5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f9a3 	bl	80050bc <HAL_TIM_IC_CaptureCallback>
 8004d76:	e005      	b.n	8004d84 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f995 	bl	80050a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9a6 	bl	80050d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d020      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01b      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0204 	mvn.w	r2, #4
 8004da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f97d 	bl	80050bc <HAL_TIM_IC_CaptureCallback>
 8004dc2:	e005      	b.n	8004dd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f96f 	bl	80050a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f980 	bl	80050d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01b      	beq.n	8004e22 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f06f 0208 	mvn.w	r2, #8
 8004df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2204      	movs	r2, #4
 8004df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f957 	bl	80050bc <HAL_TIM_IC_CaptureCallback>
 8004e0e:	e005      	b.n	8004e1c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f949 	bl	80050a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f95a 	bl	80050d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0310 	and.w	r3, r3, #16
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01b      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f06f 0210 	mvn.w	r2, #16
 8004e3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2208      	movs	r2, #8
 8004e44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f931 	bl	80050bc <HAL_TIM_IC_CaptureCallback>
 8004e5a:	e005      	b.n	8004e68 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f923 	bl	80050a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f934 	bl	80050d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f06f 0201 	mvn.w	r2, #1
 8004e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f901 	bl	8005094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00c      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fab9 	bl	8005428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00c      	beq.n	8004eda <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f905 	bl	80050e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00c      	beq.n	8004efe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f06f 0220 	mvn.w	r2, #32
 8004ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fa8b 	bl	8005414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_TIM_ConfigClockSource+0x1c>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0b4      	b.n	800508c <HAL_TIM_ConfigClockSource+0x186>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f48:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f5a:	d03e      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0xd4>
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f60:	f200 8087 	bhi.w	8005072 <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f68:	f000 8086 	beq.w	8005078 <HAL_TIM_ConfigClockSource+0x172>
 8004f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f70:	d87f      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x16c>
 8004f72:	2b70      	cmp	r3, #112	@ 0x70
 8004f74:	d01a      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0xa6>
 8004f76:	2b70      	cmp	r3, #112	@ 0x70
 8004f78:	d87b      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7a:	2b60      	cmp	r3, #96	@ 0x60
 8004f7c:	d050      	beq.n	8005020 <HAL_TIM_ConfigClockSource+0x11a>
 8004f7e:	2b60      	cmp	r3, #96	@ 0x60
 8004f80:	d877      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x16c>
 8004f82:	2b50      	cmp	r3, #80	@ 0x50
 8004f84:	d03c      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0xfa>
 8004f86:	2b50      	cmp	r3, #80	@ 0x50
 8004f88:	d873      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8a:	2b40      	cmp	r3, #64	@ 0x40
 8004f8c:	d058      	beq.n	8005040 <HAL_TIM_ConfigClockSource+0x13a>
 8004f8e:	2b40      	cmp	r3, #64	@ 0x40
 8004f90:	d86f      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x16c>
 8004f92:	2b30      	cmp	r3, #48	@ 0x30
 8004f94:	d064      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x15a>
 8004f96:	2b30      	cmp	r3, #48	@ 0x30
 8004f98:	d86b      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d060      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x15a>
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d867      	bhi.n	8005072 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d05c      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d05a      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0x15a>
 8004faa:	e062      	b.n	8005072 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fbc:	f000 f99c 	bl	80052f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]
      break;
 8004fd8:	e04f      	b.n	800507a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fea:	f000 f985 	bl	80052f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ffc:	609a      	str	r2, [r3, #8]
      break;
 8004ffe:	e03c      	b.n	800507a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500c:	461a      	mov	r2, r3
 800500e:	f000 f8f9 	bl	8005204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2150      	movs	r1, #80	@ 0x50
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f952 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 800501e:	e02c      	b.n	800507a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800502c:	461a      	mov	r2, r3
 800502e:	f000 f918 	bl	8005262 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2160      	movs	r1, #96	@ 0x60
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f942 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 800503e:	e01c      	b.n	800507a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504c:	461a      	mov	r2, r3
 800504e:	f000 f8d9 	bl	8005204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2140      	movs	r1, #64	@ 0x40
 8005058:	4618      	mov	r0, r3
 800505a:	f000 f932 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 800505e:	e00c      	b.n	800507a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f000 f929 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8005070:	e003      	b.n	800507a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
      break;
 8005076:	e000      	b.n	800507a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005078:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800508a:	7bfb      	ldrb	r3, [r7, #15]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a37      	ldr	r2, [pc, #220]	@ (80051e8 <TIM_Base_SetConfig+0xf0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00f      	beq.n	8005130 <TIM_Base_SetConfig+0x38>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005116:	d00b      	beq.n	8005130 <TIM_Base_SetConfig+0x38>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a34      	ldr	r2, [pc, #208]	@ (80051ec <TIM_Base_SetConfig+0xf4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_Base_SetConfig+0x38>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a33      	ldr	r2, [pc, #204]	@ (80051f0 <TIM_Base_SetConfig+0xf8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0x38>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a32      	ldr	r2, [pc, #200]	@ (80051f4 <TIM_Base_SetConfig+0xfc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d108      	bne.n	8005142 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a28      	ldr	r2, [pc, #160]	@ (80051e8 <TIM_Base_SetConfig+0xf0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d01b      	beq.n	8005182 <TIM_Base_SetConfig+0x8a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005150:	d017      	beq.n	8005182 <TIM_Base_SetConfig+0x8a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a25      	ldr	r2, [pc, #148]	@ (80051ec <TIM_Base_SetConfig+0xf4>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <TIM_Base_SetConfig+0x8a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a24      	ldr	r2, [pc, #144]	@ (80051f0 <TIM_Base_SetConfig+0xf8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00f      	beq.n	8005182 <TIM_Base_SetConfig+0x8a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a23      	ldr	r2, [pc, #140]	@ (80051f4 <TIM_Base_SetConfig+0xfc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00b      	beq.n	8005182 <TIM_Base_SetConfig+0x8a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a22      	ldr	r2, [pc, #136]	@ (80051f8 <TIM_Base_SetConfig+0x100>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d007      	beq.n	8005182 <TIM_Base_SetConfig+0x8a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a21      	ldr	r2, [pc, #132]	@ (80051fc <TIM_Base_SetConfig+0x104>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d003      	beq.n	8005182 <TIM_Base_SetConfig+0x8a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a20      	ldr	r2, [pc, #128]	@ (8005200 <TIM_Base_SetConfig+0x108>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d108      	bne.n	8005194 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a0c      	ldr	r2, [pc, #48]	@ (80051e8 <TIM_Base_SetConfig+0xf0>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d103      	bne.n	80051c2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f043 0204 	orr.w	r2, r3, #4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40014400 	.word	0x40014400
 8005200:	40014800 	.word	0x40014800

08005204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0201 	bic.w	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800522e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f023 030a 	bic.w	r3, r3, #10
 8005240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005262:	b480      	push	{r7}
 8005264:	b087      	sub	sp, #28
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f023 0210 	bic.w	r2, r3, #16
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800528c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	031b      	lsls	r3, r3, #12
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800529e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	f043 0307 	orr.w	r3, r3, #7
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	431a      	orrs	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4313      	orrs	r3, r2
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800534c:	2302      	movs	r3, #2
 800534e:	e050      	b.n	80053f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1c      	ldr	r2, [pc, #112]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800539c:	d013      	beq.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a18      	ldr	r2, [pc, #96]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a15      	ldr	r2, [pc, #84]	@ (800540c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a13      	ldr	r2, [pc, #76]	@ (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d10c      	bne.n	80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40014000 	.word	0x40014000

08005414 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e042      	b.n	80054d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fd fc0a 	bl	8002c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2224      	movs	r2, #36	@ 0x24
 800546c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800547e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f82b 	bl	80054dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b0c0      	sub	sp, #256	@ 0x100
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	68d9      	ldr	r1, [r3, #12]
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	ea40 0301 	orr.w	r3, r0, r1
 8005504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	431a      	orrs	r2, r3
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	431a      	orrs	r2, r3
 800551c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005534:	f021 010c 	bic.w	r1, r1, #12
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005542:	430b      	orrs	r3, r1
 8005544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005556:	6999      	ldr	r1, [r3, #24]
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	ea40 0301 	orr.w	r3, r0, r1
 8005562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b8f      	ldr	r3, [pc, #572]	@ (80057a8 <UART_SetConfig+0x2cc>)
 800556c:	429a      	cmp	r2, r3
 800556e:	d005      	beq.n	800557c <UART_SetConfig+0xa0>
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b8d      	ldr	r3, [pc, #564]	@ (80057ac <UART_SetConfig+0x2d0>)
 8005578:	429a      	cmp	r2, r3
 800557a:	d104      	bne.n	8005586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800557c:	f7ff f834 	bl	80045e8 <HAL_RCC_GetPCLK2Freq>
 8005580:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005584:	e003      	b.n	800558e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005586:	f7ff f81b 	bl	80045c0 <HAL_RCC_GetPCLK1Freq>
 800558a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005598:	f040 810c 	bne.w	80057b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800559c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055ae:	4622      	mov	r2, r4
 80055b0:	462b      	mov	r3, r5
 80055b2:	1891      	adds	r1, r2, r2
 80055b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055b6:	415b      	adcs	r3, r3
 80055b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055be:	4621      	mov	r1, r4
 80055c0:	eb12 0801 	adds.w	r8, r2, r1
 80055c4:	4629      	mov	r1, r5
 80055c6:	eb43 0901 	adc.w	r9, r3, r1
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055de:	4690      	mov	r8, r2
 80055e0:	4699      	mov	r9, r3
 80055e2:	4623      	mov	r3, r4
 80055e4:	eb18 0303 	adds.w	r3, r8, r3
 80055e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055ec:	462b      	mov	r3, r5
 80055ee:	eb49 0303 	adc.w	r3, r9, r3
 80055f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005602:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800560a:	460b      	mov	r3, r1
 800560c:	18db      	adds	r3, r3, r3
 800560e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005610:	4613      	mov	r3, r2
 8005612:	eb42 0303 	adc.w	r3, r2, r3
 8005616:	657b      	str	r3, [r7, #84]	@ 0x54
 8005618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800561c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005620:	f7fb f9f8 	bl	8000a14 <__aeabi_uldivmod>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4b61      	ldr	r3, [pc, #388]	@ (80057b0 <UART_SetConfig+0x2d4>)
 800562a:	fba3 2302 	umull	r2, r3, r3, r2
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	011c      	lsls	r4, r3, #4
 8005632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800563c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	1891      	adds	r1, r2, r2
 800564a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800564c:	415b      	adcs	r3, r3
 800564e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005654:	4641      	mov	r1, r8
 8005656:	eb12 0a01 	adds.w	sl, r2, r1
 800565a:	4649      	mov	r1, r9
 800565c:	eb43 0b01 	adc.w	fp, r3, r1
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800566c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005674:	4692      	mov	sl, r2
 8005676:	469b      	mov	fp, r3
 8005678:	4643      	mov	r3, r8
 800567a:	eb1a 0303 	adds.w	r3, sl, r3
 800567e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005682:	464b      	mov	r3, r9
 8005684:	eb4b 0303 	adc.w	r3, fp, r3
 8005688:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005698:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800569c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056a0:	460b      	mov	r3, r1
 80056a2:	18db      	adds	r3, r3, r3
 80056a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056a6:	4613      	mov	r3, r2
 80056a8:	eb42 0303 	adc.w	r3, r2, r3
 80056ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056b6:	f7fb f9ad 	bl	8000a14 <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4611      	mov	r1, r2
 80056c0:	4b3b      	ldr	r3, [pc, #236]	@ (80057b0 <UART_SetConfig+0x2d4>)
 80056c2:	fba3 2301 	umull	r2, r3, r3, r1
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	2264      	movs	r2, #100	@ 0x64
 80056ca:	fb02 f303 	mul.w	r3, r2, r3
 80056ce:	1acb      	subs	r3, r1, r3
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056d6:	4b36      	ldr	r3, [pc, #216]	@ (80057b0 <UART_SetConfig+0x2d4>)
 80056d8:	fba3 2302 	umull	r2, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056e4:	441c      	add	r4, r3
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005700:	415b      	adcs	r3, r3
 8005702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005708:	4641      	mov	r1, r8
 800570a:	1851      	adds	r1, r2, r1
 800570c:	6339      	str	r1, [r7, #48]	@ 0x30
 800570e:	4649      	mov	r1, r9
 8005710:	414b      	adcs	r3, r1
 8005712:	637b      	str	r3, [r7, #52]	@ 0x34
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005720:	4659      	mov	r1, fp
 8005722:	00cb      	lsls	r3, r1, #3
 8005724:	4651      	mov	r1, sl
 8005726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572a:	4651      	mov	r1, sl
 800572c:	00ca      	lsls	r2, r1, #3
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	4603      	mov	r3, r0
 8005734:	4642      	mov	r2, r8
 8005736:	189b      	adds	r3, r3, r2
 8005738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800573c:	464b      	mov	r3, r9
 800573e:	460a      	mov	r2, r1
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005754:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800575c:	460b      	mov	r3, r1
 800575e:	18db      	adds	r3, r3, r3
 8005760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005762:	4613      	mov	r3, r2
 8005764:	eb42 0303 	adc.w	r3, r2, r3
 8005768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800576a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800576e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005772:	f7fb f94f 	bl	8000a14 <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <UART_SetConfig+0x2d4>)
 800577c:	fba3 1302 	umull	r1, r3, r3, r2
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	2164      	movs	r1, #100	@ 0x64
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	3332      	adds	r3, #50	@ 0x32
 800578e:	4a08      	ldr	r2, [pc, #32]	@ (80057b0 <UART_SetConfig+0x2d4>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	f003 0207 	and.w	r2, r3, #7
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4422      	add	r2, r4
 80057a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057a4:	e106      	b.n	80059b4 <UART_SetConfig+0x4d8>
 80057a6:	bf00      	nop
 80057a8:	40011000 	.word	0x40011000
 80057ac:	40011400 	.word	0x40011400
 80057b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057c6:	4642      	mov	r2, r8
 80057c8:	464b      	mov	r3, r9
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	6239      	str	r1, [r7, #32]
 80057ce:	415b      	adcs	r3, r3
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057d6:	4641      	mov	r1, r8
 80057d8:	1854      	adds	r4, r2, r1
 80057da:	4649      	mov	r1, r9
 80057dc:	eb43 0501 	adc.w	r5, r3, r1
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	00eb      	lsls	r3, r5, #3
 80057ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ee:	00e2      	lsls	r2, r4, #3
 80057f0:	4614      	mov	r4, r2
 80057f2:	461d      	mov	r5, r3
 80057f4:	4643      	mov	r3, r8
 80057f6:	18e3      	adds	r3, r4, r3
 80057f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057fc:	464b      	mov	r3, r9
 80057fe:	eb45 0303 	adc.w	r3, r5, r3
 8005802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005812:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005816:	f04f 0200 	mov.w	r2, #0
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005822:	4629      	mov	r1, r5
 8005824:	008b      	lsls	r3, r1, #2
 8005826:	4621      	mov	r1, r4
 8005828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800582c:	4621      	mov	r1, r4
 800582e:	008a      	lsls	r2, r1, #2
 8005830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005834:	f7fb f8ee 	bl	8000a14 <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4b60      	ldr	r3, [pc, #384]	@ (80059c0 <UART_SetConfig+0x4e4>)
 800583e:	fba3 2302 	umull	r2, r3, r3, r2
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	011c      	lsls	r4, r3, #4
 8005846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584a:	2200      	movs	r2, #0
 800584c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005850:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	1891      	adds	r1, r2, r2
 800585e:	61b9      	str	r1, [r7, #24]
 8005860:	415b      	adcs	r3, r3
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005868:	4641      	mov	r1, r8
 800586a:	1851      	adds	r1, r2, r1
 800586c:	6139      	str	r1, [r7, #16]
 800586e:	4649      	mov	r1, r9
 8005870:	414b      	adcs	r3, r1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005880:	4659      	mov	r1, fp
 8005882:	00cb      	lsls	r3, r1, #3
 8005884:	4651      	mov	r1, sl
 8005886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588a:	4651      	mov	r1, sl
 800588c:	00ca      	lsls	r2, r1, #3
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	4603      	mov	r3, r0
 8005894:	4642      	mov	r2, r8
 8005896:	189b      	adds	r3, r3, r2
 8005898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800589c:	464b      	mov	r3, r9
 800589e:	460a      	mov	r2, r1
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058c0:	4649      	mov	r1, r9
 80058c2:	008b      	lsls	r3, r1, #2
 80058c4:	4641      	mov	r1, r8
 80058c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ca:	4641      	mov	r1, r8
 80058cc:	008a      	lsls	r2, r1, #2
 80058ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058d2:	f7fb f89f 	bl	8000a14 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4611      	mov	r1, r2
 80058dc:	4b38      	ldr	r3, [pc, #224]	@ (80059c0 <UART_SetConfig+0x4e4>)
 80058de:	fba3 2301 	umull	r2, r3, r3, r1
 80058e2:	095b      	lsrs	r3, r3, #5
 80058e4:	2264      	movs	r2, #100	@ 0x64
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	1acb      	subs	r3, r1, r3
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	3332      	adds	r3, #50	@ 0x32
 80058f0:	4a33      	ldr	r2, [pc, #204]	@ (80059c0 <UART_SetConfig+0x4e4>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058fc:	441c      	add	r4, r3
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005902:	2200      	movs	r2, #0
 8005904:	673b      	str	r3, [r7, #112]	@ 0x70
 8005906:	677a      	str	r2, [r7, #116]	@ 0x74
 8005908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800590c:	4642      	mov	r2, r8
 800590e:	464b      	mov	r3, r9
 8005910:	1891      	adds	r1, r2, r2
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	415b      	adcs	r3, r3
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800591c:	4641      	mov	r1, r8
 800591e:	1851      	adds	r1, r2, r1
 8005920:	6039      	str	r1, [r7, #0]
 8005922:	4649      	mov	r1, r9
 8005924:	414b      	adcs	r3, r1
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	f04f 0300 	mov.w	r3, #0
 8005930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005934:	4659      	mov	r1, fp
 8005936:	00cb      	lsls	r3, r1, #3
 8005938:	4651      	mov	r1, sl
 800593a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593e:	4651      	mov	r1, sl
 8005940:	00ca      	lsls	r2, r1, #3
 8005942:	4610      	mov	r0, r2
 8005944:	4619      	mov	r1, r3
 8005946:	4603      	mov	r3, r0
 8005948:	4642      	mov	r2, r8
 800594a:	189b      	adds	r3, r3, r2
 800594c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800594e:	464b      	mov	r3, r9
 8005950:	460a      	mov	r2, r1
 8005952:	eb42 0303 	adc.w	r3, r2, r3
 8005956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	663b      	str	r3, [r7, #96]	@ 0x60
 8005962:	667a      	str	r2, [r7, #100]	@ 0x64
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005970:	4649      	mov	r1, r9
 8005972:	008b      	lsls	r3, r1, #2
 8005974:	4641      	mov	r1, r8
 8005976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597a:	4641      	mov	r1, r8
 800597c:	008a      	lsls	r2, r1, #2
 800597e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005982:	f7fb f847 	bl	8000a14 <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <UART_SetConfig+0x4e4>)
 800598c:	fba3 1302 	umull	r1, r3, r3, r2
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	2164      	movs	r1, #100	@ 0x64
 8005994:	fb01 f303 	mul.w	r3, r1, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	3332      	adds	r3, #50	@ 0x32
 800599e:	4a08      	ldr	r2, [pc, #32]	@ (80059c0 <UART_SetConfig+0x4e4>)
 80059a0:	fba2 2303 	umull	r2, r3, r2, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4422      	add	r2, r4
 80059b2:	609a      	str	r2, [r3, #8]
}
 80059b4:	bf00      	nop
 80059b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ba:	46bd      	mov	sp, r7
 80059bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c0:	51eb851f 	.word	0x51eb851f

080059c4 <memset>:
 80059c4:	4402      	add	r2, r0
 80059c6:	4603      	mov	r3, r0
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d100      	bne.n	80059ce <memset+0xa>
 80059cc:	4770      	bx	lr
 80059ce:	f803 1b01 	strb.w	r1, [r3], #1
 80059d2:	e7f9      	b.n	80059c8 <memset+0x4>

080059d4 <__libc_init_array>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	4d0d      	ldr	r5, [pc, #52]	@ (8005a0c <__libc_init_array+0x38>)
 80059d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005a10 <__libc_init_array+0x3c>)
 80059da:	1b64      	subs	r4, r4, r5
 80059dc:	10a4      	asrs	r4, r4, #2
 80059de:	2600      	movs	r6, #0
 80059e0:	42a6      	cmp	r6, r4
 80059e2:	d109      	bne.n	80059f8 <__libc_init_array+0x24>
 80059e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005a14 <__libc_init_array+0x40>)
 80059e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005a18 <__libc_init_array+0x44>)
 80059e8:	f000 f818 	bl	8005a1c <_init>
 80059ec:	1b64      	subs	r4, r4, r5
 80059ee:	10a4      	asrs	r4, r4, #2
 80059f0:	2600      	movs	r6, #0
 80059f2:	42a6      	cmp	r6, r4
 80059f4:	d105      	bne.n	8005a02 <__libc_init_array+0x2e>
 80059f6:	bd70      	pop	{r4, r5, r6, pc}
 80059f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fc:	4798      	blx	r3
 80059fe:	3601      	adds	r6, #1
 8005a00:	e7ee      	b.n	80059e0 <__libc_init_array+0xc>
 8005a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a06:	4798      	blx	r3
 8005a08:	3601      	adds	r6, #1
 8005a0a:	e7f2      	b.n	80059f2 <__libc_init_array+0x1e>
 8005a0c:	0801db5c 	.word	0x0801db5c
 8005a10:	0801db5c 	.word	0x0801db5c
 8005a14:	0801db5c 	.word	0x0801db5c
 8005a18:	0801db60 	.word	0x0801db60

08005a1c <_init>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr

08005a28 <_fini>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	bf00      	nop
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr
